### YamlMime:ManagedReference
items:
- uid: Warbler.Controllers.DevController
  commentId: T:Warbler.Controllers.DevController
  id: DevController
  parent: Warbler.Controllers
  children:
  - Warbler.Controllers.DevController.#ctor(Warbler.Misc.WarblerDbContext)
  - Warbler.Controllers.DevController.Claims
  - Warbler.Controllers.DevController.DeleteUniversityAsync(System.Int32)
  - Warbler.Controllers.DevController.Error
  - Warbler.Controllers.DevController.Index
  - Warbler.Controllers.DevController.ResolveClaim(Warbler.Models.ClaimRequest)
  - Warbler.Controllers.DevController.Universities
  langs:
  - csharp
  - vb
  name: DevController
  nameWithType: DevController
  fullName: Warbler.Controllers.DevController
  type: Class
  source:
    id: DevController
    path: ''
    startLine: 766
  assemblies:
  - cs.temp.dll
  namespace: Warbler.Controllers
  syntax:
    content: 'public class DevController : Controller'
    content.vb: >-
      Public Class DevController
          Inherits Controller
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Warbler.Controllers.DevController.#ctor(Warbler.Misc.WarblerDbContext)
  commentId: M:Warbler.Controllers.DevController.#ctor(Warbler.Misc.WarblerDbContext)
  id: '#ctor(Warbler.Misc.WarblerDbContext)'
  parent: Warbler.Controllers.DevController
  langs:
  - csharp
  - vb
  name: DevController(WarblerDbContext)
  nameWithType: DevController.DevController(WarblerDbContext)
  fullName: Warbler.Controllers.DevController.DevController(Warbler.Misc.WarblerDbContext)
  type: Constructor
  source:
    id: .ctor
    path: ''
    startLine: 772
  assemblies:
  - cs.temp.dll
  namespace: Warbler.Controllers
  syntax:
    content: public DevController(WarblerDbContext context)
    parameters:
    - id: context
      type: Warbler.Misc.WarblerDbContext
    content.vb: Public Sub New(context As WarblerDbContext)
  overload: Warbler.Controllers.DevController.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Warbler.Controllers.DevController.Index
  commentId: M:Warbler.Controllers.DevController.Index
  id: Index
  parent: Warbler.Controllers.DevController
  langs:
  - csharp
  - vb
  name: Index()
  nameWithType: DevController.Index()
  fullName: Warbler.Controllers.DevController.Index()
  type: Method
  source:
    id: Index
    path: ''
    startLine: 778
  assemblies:
  - cs.temp.dll
  namespace: Warbler.Controllers
  syntax:
    content: public IActionResult Index()
    return:
      type: IActionResult
    content.vb: Public Function Index As IActionResult
  overload: Warbler.Controllers.DevController.Index*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Warbler.Controllers.DevController.Error
  commentId: M:Warbler.Controllers.DevController.Error
  id: Error
  parent: Warbler.Controllers.DevController
  langs:
  - csharp
  - vb
  name: Error()
  nameWithType: DevController.Error()
  fullName: Warbler.Controllers.DevController.Error()
  type: Method
  source:
    id: Error
    path: ''
    startLine: 787
  assemblies:
  - cs.temp.dll
  namespace: Warbler.Controllers
  syntax:
    content: public IActionResult Error()
    return:
      type: IActionResult
    content.vb: Public Function Error As IActionResult
  overload: Warbler.Controllers.DevController.Error*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Warbler.Controllers.DevController.Universities
  commentId: M:Warbler.Controllers.DevController.Universities
  id: Universities
  parent: Warbler.Controllers.DevController
  langs:
  - csharp
  - vb
  name: Universities()
  nameWithType: DevController.Universities()
  fullName: Warbler.Controllers.DevController.Universities()
  type: Method
  source:
    id: Universities
    path: ''
    startLine: 795
  assemblies:
  - cs.temp.dll
  namespace: Warbler.Controllers
  summary: "\nReturns a JSON string with all university info down to the message level.\n"
  example: []
  syntax:
    content: public Task<string> Universities()
    return:
      type: Task{System.String}
    content.vb: Public Function Universities As Task(Of String)
  overload: Warbler.Controllers.DevController.Universities*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Warbler.Controllers.DevController.Claims
  commentId: M:Warbler.Controllers.DevController.Claims
  id: Claims
  parent: Warbler.Controllers.DevController
  langs:
  - csharp
  - vb
  name: Claims()
  nameWithType: DevController.Claims()
  fullName: Warbler.Controllers.DevController.Claims()
  type: Method
  source:
    id: Claims
    path: ''
    startLine: 802
  assemblies:
  - cs.temp.dll
  namespace: Warbler.Controllers
  syntax:
    content: public Task<string> Claims()
    return:
      type: Task{System.String}
    content.vb: Public Function Claims As Task(Of String)
  overload: Warbler.Controllers.DevController.Claims*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Warbler.Controllers.DevController.ResolveClaim(Warbler.Models.ClaimRequest)
  commentId: M:Warbler.Controllers.DevController.ResolveClaim(Warbler.Models.ClaimRequest)
  id: ResolveClaim(Warbler.Models.ClaimRequest)
  parent: Warbler.Controllers.DevController
  langs:
  - csharp
  - vb
  name: ResolveClaim(ClaimRequest)
  nameWithType: DevController.ResolveClaim(ClaimRequest)
  fullName: Warbler.Controllers.DevController.ResolveClaim(Warbler.Models.ClaimRequest)
  type: Method
  source:
    id: ResolveClaim
    path: ''
    startLine: 809
  assemblies:
  - cs.temp.dll
  namespace: Warbler.Controllers
  syntax:
    content: public Task ResolveClaim(ClaimRequest claim)
    parameters:
    - id: claim
      type: Warbler.Models.ClaimRequest
    return:
      type: Task
    content.vb: Public Function ResolveClaim(claim As ClaimRequest) As Task
  overload: Warbler.Controllers.DevController.ResolveClaim*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Warbler.Controllers.DevController.DeleteUniversityAsync(System.Int32)
  commentId: M:Warbler.Controllers.DevController.DeleteUniversityAsync(System.Int32)
  id: DeleteUniversityAsync(System.Int32)
  parent: Warbler.Controllers.DevController
  langs:
  - csharp
  - vb
  name: DeleteUniversityAsync(Int32)
  nameWithType: DevController.DeleteUniversityAsync(Int32)
  fullName: Warbler.Controllers.DevController.DeleteUniversityAsync(System.Int32)
  type: Method
  source:
    id: DeleteUniversityAsync
    path: ''
    startLine: 823
  assemblies:
  - cs.temp.dll
  namespace: Warbler.Controllers
  summary: "\nTODO: For demo purposes only; remove this route.\n"
  example: []
  syntax:
    content: public Task<IActionResult> DeleteUniversityAsync(int universityId)
    parameters:
    - id: universityId
      type: System.Int32
    return:
      type: Task{IActionResult}
    content.vb: Public Function DeleteUniversityAsync(universityId As Integer) As Task(Of IActionResult)
  overload: Warbler.Controllers.DevController.DeleteUniversityAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Warbler.Controllers
  commentId: N:Warbler.Controllers
  isExternal: false
  name: Warbler.Controllers
  nameWithType: Warbler.Controllers
  fullName: Warbler.Controllers
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Warbler.Controllers.DevController.#ctor*
  commentId: Overload:Warbler.Controllers.DevController.#ctor
  isExternal: false
  name: DevController
  nameWithType: DevController.DevController
  fullName: Warbler.Controllers.DevController.DevController
- uid: Warbler.Misc.WarblerDbContext
  commentId: T:Warbler.Misc.WarblerDbContext
  parent: Warbler.Misc
  isExternal: false
  name: WarblerDbContext
  nameWithType: WarblerDbContext
  fullName: Warbler.Misc.WarblerDbContext
- uid: Warbler.Misc
  commentId: N:Warbler.Misc
  isExternal: false
  name: Warbler.Misc
  nameWithType: Warbler.Misc
  fullName: Warbler.Misc
- uid: Warbler.Controllers.DevController.Index*
  commentId: Overload:Warbler.Controllers.DevController.Index
  isExternal: false
  name: Index
  nameWithType: DevController.Index
  fullName: Warbler.Controllers.DevController.Index
- uid: IActionResult
  isExternal: true
  name: IActionResult
  nameWithType: IActionResult
  fullName: IActionResult
- uid: Warbler.Controllers.DevController.Error*
  commentId: Overload:Warbler.Controllers.DevController.Error
  isExternal: false
  name: Error
  nameWithType: DevController.Error
  fullName: Warbler.Controllers.DevController.Error
- uid: Warbler.Controllers.DevController.Universities*
  commentId: Overload:Warbler.Controllers.DevController.Universities
  isExternal: false
  name: Universities
  nameWithType: DevController.Universities
  fullName: Warbler.Controllers.DevController.Universities
- uid: Task{System.String}
  commentId: '!:Task{System.String}'
  definition: Task`1
  name: Task<String>
  nameWithType: Task<String>
  fullName: Task<System.String>
  nameWithType.vb: Task(Of String)
  fullName.vb: Task(Of System.String)
  name.vb: Task(Of String)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Warbler.Controllers.DevController.Claims*
  commentId: Overload:Warbler.Controllers.DevController.Claims
  isExternal: false
  name: Claims
  nameWithType: DevController.Claims
  fullName: Warbler.Controllers.DevController.Claims
- uid: Warbler.Controllers.DevController.ResolveClaim*
  commentId: Overload:Warbler.Controllers.DevController.ResolveClaim
  isExternal: false
  name: ResolveClaim
  nameWithType: DevController.ResolveClaim
  fullName: Warbler.Controllers.DevController.ResolveClaim
- uid: Warbler.Models.ClaimRequest
  commentId: T:Warbler.Models.ClaimRequest
  parent: Warbler.Models
  isExternal: false
  name: ClaimRequest
  nameWithType: ClaimRequest
  fullName: Warbler.Models.ClaimRequest
- uid: Task
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: Task
- uid: Warbler.Models
  commentId: N:Warbler.Models
  isExternal: false
  name: Warbler.Models
  nameWithType: Warbler.Models
  fullName: Warbler.Models
- uid: Warbler.Controllers.DevController.DeleteUniversityAsync*
  commentId: Overload:Warbler.Controllers.DevController.DeleteUniversityAsync
  isExternal: false
  name: DeleteUniversityAsync
  nameWithType: DevController.DeleteUniversityAsync
  fullName: Warbler.Controllers.DevController.DeleteUniversityAsync
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Task{IActionResult}
  commentId: '!:Task{IActionResult}'
  definition: Task`1
  name: Task<IActionResult>
  nameWithType: Task<IActionResult>
  fullName: Task<IActionResult>
  nameWithType.vb: Task(Of IActionResult)
  fullName.vb: Task(Of IActionResult)
  name.vb: Task(Of IActionResult)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: IActionResult
    name: IActionResult
    nameWithType: IActionResult
    fullName: IActionResult
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: IActionResult
    name: IActionResult
    nameWithType: IActionResult
    fullName: IActionResult
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
