### YamlMime:ManagedReference
items:
- uid: Warbler.Interfaces.IUniversityRepository
  commentId: T:Warbler.Interfaces.IUniversityRepository
  id: IUniversityRepository
  parent: Warbler.Interfaces
  children:
  - Warbler.Interfaces.IUniversityRepository.AllQueryable(QueryDepth)
  - Warbler.Interfaces.IUniversityRepository.CreateAsync(NearByResult)
  - Warbler.Interfaces.IUniversityRepository.LookupAsync(System.String)
  - Warbler.Interfaces.IUniversityRepository.SaveAsync
  langs:
  - csharp
  - vb
  name: IUniversityRepository
  nameWithType: IUniversityRepository
  fullName: Warbler.Interfaces.IUniversityRepository
  type: Interface
  source:
    id: IUniversityRepository
    path: ''
    startLine: 1332
  assemblies:
  - cs.temp.dll
  namespace: Warbler.Interfaces
  summary: "\nDefines an API for university-based queries against a repository.\n"
  example: []
  syntax:
    content: public interface IUniversityRepository
    content.vb: Public Interface IUniversityRepository
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Warbler.Interfaces.IUniversityRepository.CreateAsync(NearByResult)
  commentId: M:Warbler.Interfaces.IUniversityRepository.CreateAsync(NearByResult)
  id: CreateAsync(NearByResult)
  parent: Warbler.Interfaces.IUniversityRepository
  langs:
  - csharp
  - vb
  name: CreateAsync(NearByResult)
  nameWithType: IUniversityRepository.CreateAsync(NearByResult)
  fullName: Warbler.Interfaces.IUniversityRepository.CreateAsync(NearByResult)
  type: Method
  source:
    id: CreateAsync
    path: ''
    startLine: 1339
  assemblies:
  - cs.temp.dll
  namespace: Warbler.Interfaces
  summary: "\nAdds a new university based on a Google Places Search result.\n"
  example: []
  syntax:
    content: Task<University> CreateAsync(NearByResult uni)
    parameters:
    - id: uni
      type: NearByResult
      description: The result whose properties will be used for creation.
    return:
      type: Task{Warbler.Models.University}
      description: The created university.
    content.vb: Function CreateAsync(uni As NearByResult) As Task(Of University)
  overload: Warbler.Interfaces.IUniversityRepository.CreateAsync*
- uid: Warbler.Interfaces.IUniversityRepository.SaveAsync
  commentId: M:Warbler.Interfaces.IUniversityRepository.SaveAsync
  id: SaveAsync
  parent: Warbler.Interfaces.IUniversityRepository
  langs:
  - csharp
  - vb
  name: SaveAsync()
  nameWithType: IUniversityRepository.SaveAsync()
  fullName: Warbler.Interfaces.IUniversityRepository.SaveAsync()
  type: Method
  source:
    id: SaveAsync
    path: ''
    startLine: 1345
  assemblies:
  - cs.temp.dll
  namespace: Warbler.Interfaces
  summary: "\nUpdates the properties of any universities in the database\nthat have been queried for and subsequently changed.\n"
  example: []
  syntax:
    content: Task SaveAsync()
    return:
      type: Task
    content.vb: Function SaveAsync As Task
  overload: Warbler.Interfaces.IUniversityRepository.SaveAsync*
- uid: Warbler.Interfaces.IUniversityRepository.LookupAsync(System.String)
  commentId: M:Warbler.Interfaces.IUniversityRepository.LookupAsync(System.String)
  id: LookupAsync(System.String)
  parent: Warbler.Interfaces.IUniversityRepository
  langs:
  - csharp
  - vb
  name: LookupAsync(String)
  nameWithType: IUniversityRepository.LookupAsync(String)
  fullName: Warbler.Interfaces.IUniversityRepository.LookupAsync(System.String)
  type: Method
  source:
    id: LookupAsync
    path: ''
    startLine: 1353
  assemblies:
  - cs.temp.dll
  namespace: Warbler.Interfaces
  summary: "\nChecks to see if a university for a given Google Place ID exists.\n"
  example: []
  syntax:
    content: Task<University> LookupAsync(string placeId)
    parameters:
    - id: placeId
      type: System.String
      description: The place ID to use for lookup. These are unique.
    return:
      type: Task{Warbler.Models.University}
      description: The university (at user level) if it exists.
    content.vb: Function LookupAsync(placeId As String) As Task(Of University)
  overload: Warbler.Interfaces.IUniversityRepository.LookupAsync*
  exceptions:
  - type: Warbler.Exceptions.UniversityNotFoundException
    commentId: T:Warbler.Exceptions.UniversityNotFoundException
- uid: Warbler.Interfaces.IUniversityRepository.AllQueryable(QueryDepth)
  commentId: M:Warbler.Interfaces.IUniversityRepository.AllQueryable(QueryDepth)
  id: AllQueryable(QueryDepth)
  parent: Warbler.Interfaces.IUniversityRepository
  langs:
  - csharp
  - vb
  name: AllQueryable(QueryDepth)
  nameWithType: IUniversityRepository.AllQueryable(QueryDepth)
  fullName: Warbler.Interfaces.IUniversityRepository.AllQueryable(QueryDepth)
  type: Method
  source:
    id: AllQueryable
    path: ''
    startLine: 1367
  assemblies:
  - cs.temp.dll
  namespace: Warbler.Interfaces
  summary: "\nGets an executable query for all universities in the database.\n"
  example:
  - "\nUsing a query depth of <xref href=\"Warbler.Models.Server\" data-throw-if-not-resolved=\"false\"></xref> will make each <xref href=\"Warbler.Models.University\" data-throw-if-not-resolved=\"false\"></xref>\nobject in the query's result have a filled-in Server property. However, those \nServer objects will each have a null <xref href=\"Warbler.Models.Channel\" data-throw-if-not-resolved=\"false\"></xref> collection property.\n"
  syntax:
    content: IQueryable<University> AllQueryable(QueryDepth depth = null)
    parameters:
    - id: depth
      type: QueryDepth
      description: At what level navigation properties should be retrieved.
    return:
      type: IQueryable{Warbler.Models.University}
    content.vb: Function AllQueryable(depth As QueryDepth = Nothing) As IQueryable(Of University)
  overload: Warbler.Interfaces.IUniversityRepository.AllQueryable*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nThrown when <span class=\"paramref\">depth</span>'s value is unknown.\n"
references:
- uid: Warbler.Interfaces
  commentId: N:Warbler.Interfaces
  isExternal: false
  name: Warbler.Interfaces
  nameWithType: Warbler.Interfaces
  fullName: Warbler.Interfaces
- uid: Warbler.Interfaces.IUniversityRepository.CreateAsync*
  commentId: Overload:Warbler.Interfaces.IUniversityRepository.CreateAsync
  isExternal: false
  name: CreateAsync
  nameWithType: IUniversityRepository.CreateAsync
  fullName: Warbler.Interfaces.IUniversityRepository.CreateAsync
- uid: NearByResult
  isExternal: true
  name: NearByResult
  nameWithType: NearByResult
  fullName: NearByResult
- uid: Task{Warbler.Models.University}
  commentId: '!:Task{Warbler.Models.University}'
  definition: Task`1
  name: Task<University>
  nameWithType: Task<University>
  fullName: Task<Warbler.Models.University>
  nameWithType.vb: Task(Of University)
  fullName.vb: Task(Of Warbler.Models.University)
  name.vb: Task(Of University)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Warbler.Models.University
    name: University
    nameWithType: University
    fullName: Warbler.Models.University
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Warbler.Models.University
    name: University
    nameWithType: University
    fullName: Warbler.Models.University
  - name: )
    nameWithType: )
    fullName: )
- uid: Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Warbler.Interfaces.IUniversityRepository.SaveAsync*
  commentId: Overload:Warbler.Interfaces.IUniversityRepository.SaveAsync
  isExternal: false
  name: SaveAsync
  nameWithType: IUniversityRepository.SaveAsync
  fullName: Warbler.Interfaces.IUniversityRepository.SaveAsync
- uid: Task
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: Task
- uid: Warbler.Interfaces.IUniversityRepository.LookupAsync*
  commentId: Overload:Warbler.Interfaces.IUniversityRepository.LookupAsync
  isExternal: false
  name: LookupAsync
  nameWithType: IUniversityRepository.LookupAsync
  fullName: Warbler.Interfaces.IUniversityRepository.LookupAsync
- uid: Warbler.Exceptions.UniversityNotFoundException
  commentId: T:Warbler.Exceptions.UniversityNotFoundException
  isExternal: false
  name: UniversityNotFoundException
  nameWithType: UniversityNotFoundException
  fullName: Warbler.Exceptions.UniversityNotFoundException
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Warbler.Models.Server
  commentId: T:Warbler.Models.Server
  parent: Warbler.Models
  isExternal: false
  name: Server
  nameWithType: Server
  fullName: Warbler.Models.Server
- uid: Warbler.Models.University
  commentId: T:Warbler.Models.University
  parent: Warbler.Models
  isExternal: false
  name: University
  nameWithType: University
  fullName: Warbler.Models.University
- uid: Warbler.Models.Channel
  commentId: T:Warbler.Models.Channel
  parent: Warbler.Models
  isExternal: false
  name: Channel
  nameWithType: Channel
  fullName: Warbler.Models.Channel
- uid: Warbler.Interfaces.IUniversityRepository.AllQueryable*
  commentId: Overload:Warbler.Interfaces.IUniversityRepository.AllQueryable
  isExternal: false
  name: AllQueryable
  nameWithType: IUniversityRepository.AllQueryable
  fullName: Warbler.Interfaces.IUniversityRepository.AllQueryable
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
- uid: QueryDepth
  isExternal: true
  name: QueryDepth
  nameWithType: QueryDepth
  fullName: QueryDepth
- uid: IQueryable{Warbler.Models.University}
  commentId: '!:IQueryable{Warbler.Models.University}'
  definition: IQueryable`1
  name: IQueryable<University>
  nameWithType: IQueryable<University>
  fullName: IQueryable<Warbler.Models.University>
  nameWithType.vb: IQueryable(Of University)
  fullName.vb: IQueryable(Of Warbler.Models.University)
  name.vb: IQueryable(Of University)
  spec.csharp:
  - uid: IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Warbler.Models.University
    name: University
    nameWithType: University
    fullName: Warbler.Models.University
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Warbler.Models.University
    name: University
    nameWithType: University
    fullName: Warbler.Models.University
  - name: )
    nameWithType: )
    fullName: )
- uid: Warbler.Models
  commentId: N:Warbler.Models
  isExternal: false
  name: Warbler.Models
  nameWithType: Warbler.Models
  fullName: Warbler.Models
- uid: IQueryable`1
  isExternal: true
  name: IQueryable<>
  nameWithType: IQueryable<>
  fullName: IQueryable<>
  nameWithType.vb: IQueryable(Of )
  fullName.vb: IQueryable(Of )
  name.vb: IQueryable(Of )
  spec.csharp:
  - uid: IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
