### YamlMime:ManagedReference
items:
- uid: Warbler.Repositories.SqlChannelTemplateRepository
  commentId: T:Warbler.Repositories.SqlChannelTemplateRepository
  id: SqlChannelTemplateRepository
  parent: Warbler.Repositories
  children:
  - Warbler.Repositories.SqlChannelTemplateRepository.#ctor(Warbler.Misc.WarblerDbContext)
  - Warbler.Repositories.SqlChannelTemplateRepository.CreateAsync(Warbler.Models.ChannelTemplate,System.Boolean)
  - Warbler.Repositories.SqlChannelTemplateRepository.GetAsync
  langs:
  - csharp
  - vb
  name: SqlChannelTemplateRepository
  nameWithType: SqlChannelTemplateRepository
  fullName: Warbler.Repositories.SqlChannelTemplateRepository
  type: Class
  source:
    id: SqlChannelTemplateRepository
    path: ''
    startLine: 3117
  assemblies:
  - cs.temp.dll
  namespace: Warbler.Repositories
  summary: "\nRuns queries against the SQL database using Entity Framework.\nLook at <xref href=\"Warbler.Interfaces.IChannelTemplateRepository\" data-throw-if-not-resolved=\"false\"></xref> for docs.\n"
  example: []
  syntax:
    content: 'public class SqlChannelTemplateRepository : IChannelTemplateRepository'
    content.vb: >-
      Public Class SqlChannelTemplateRepository
          Implements IChannelTemplateRepository
  inheritance:
  - System.Object
  implements:
  - Warbler.Interfaces.IChannelTemplateRepository
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Warbler.Repositories.SqlChannelTemplateRepository.#ctor(Warbler.Misc.WarblerDbContext)
  commentId: M:Warbler.Repositories.SqlChannelTemplateRepository.#ctor(Warbler.Misc.WarblerDbContext)
  id: '#ctor(Warbler.Misc.WarblerDbContext)'
  parent: Warbler.Repositories.SqlChannelTemplateRepository
  langs:
  - csharp
  - vb
  name: SqlChannelTemplateRepository(WarblerDbContext)
  nameWithType: SqlChannelTemplateRepository.SqlChannelTemplateRepository(WarblerDbContext)
  fullName: Warbler.Repositories.SqlChannelTemplateRepository.SqlChannelTemplateRepository(Warbler.Misc.WarblerDbContext)
  type: Constructor
  source:
    id: .ctor
    path: ''
    startLine: 3121
  assemblies:
  - cs.temp.dll
  namespace: Warbler.Repositories
  syntax:
    content: public SqlChannelTemplateRepository(WarblerDbContext context)
    parameters:
    - id: context
      type: Warbler.Misc.WarblerDbContext
    content.vb: Public Sub New(context As WarblerDbContext)
  overload: Warbler.Repositories.SqlChannelTemplateRepository.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Warbler.Repositories.SqlChannelTemplateRepository.CreateAsync(Warbler.Models.ChannelTemplate,System.Boolean)
  commentId: M:Warbler.Repositories.SqlChannelTemplateRepository.CreateAsync(Warbler.Models.ChannelTemplate,System.Boolean)
  id: CreateAsync(Warbler.Models.ChannelTemplate,System.Boolean)
  parent: Warbler.Repositories.SqlChannelTemplateRepository
  langs:
  - csharp
  - vb
  name: CreateAsync(ChannelTemplate, Boolean)
  nameWithType: SqlChannelTemplateRepository.CreateAsync(ChannelTemplate, Boolean)
  fullName: Warbler.Repositories.SqlChannelTemplateRepository.CreateAsync(Warbler.Models.ChannelTemplate, System.Boolean)
  type: Method
  source:
    id: CreateAsync
    path: ''
    startLine: 3126
  assemblies:
  - cs.temp.dll
  namespace: Warbler.Repositories
  syntax:
    content: public Task CreateAsync(ChannelTemplate channelTemplate, bool saveChanges = false)
    parameters:
    - id: channelTemplate
      type: Warbler.Models.ChannelTemplate
    - id: saveChanges
      type: System.Boolean
    return:
      type: Task
    content.vb: Public Function CreateAsync(channelTemplate As ChannelTemplate, saveChanges As Boolean = False) As Task
  overload: Warbler.Repositories.SqlChannelTemplateRepository.CreateAsync*
  implements:
  - Warbler.Interfaces.IChannelTemplateRepository.CreateAsync(Warbler.Models.ChannelTemplate,System.Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Warbler.Repositories.SqlChannelTemplateRepository.GetAsync
  commentId: M:Warbler.Repositories.SqlChannelTemplateRepository.GetAsync
  id: GetAsync
  parent: Warbler.Repositories.SqlChannelTemplateRepository
  langs:
  - csharp
  - vb
  name: GetAsync()
  nameWithType: SqlChannelTemplateRepository.GetAsync()
  fullName: Warbler.Repositories.SqlChannelTemplateRepository.GetAsync()
  type: Method
  source:
    id: GetAsync
    path: ''
    startLine: 3135
  assemblies:
  - cs.temp.dll
  namespace: Warbler.Repositories
  syntax:
    content: public Task<List<ChannelTemplate>> GetAsync()
    return:
      type: Task{System.Collections.Generic.List{Warbler.Models.ChannelTemplate}}
    content.vb: Public Function GetAsync As Task(Of List(Of ChannelTemplate))
  overload: Warbler.Repositories.SqlChannelTemplateRepository.GetAsync*
  implements:
  - Warbler.Interfaces.IChannelTemplateRepository.GetAsync
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Warbler.Interfaces.IChannelTemplateRepository
  commentId: T:Warbler.Interfaces.IChannelTemplateRepository
  parent: Warbler.Interfaces
  isExternal: false
  name: IChannelTemplateRepository
  nameWithType: IChannelTemplateRepository
  fullName: Warbler.Interfaces.IChannelTemplateRepository
- uid: Warbler.Repositories
  commentId: N:Warbler.Repositories
  isExternal: false
  name: Warbler.Repositories
  nameWithType: Warbler.Repositories
  fullName: Warbler.Repositories
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Warbler.Interfaces
  commentId: N:Warbler.Interfaces
  isExternal: false
  name: Warbler.Interfaces
  nameWithType: Warbler.Interfaces
  fullName: Warbler.Interfaces
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Warbler.Repositories.SqlChannelTemplateRepository.#ctor*
  commentId: Overload:Warbler.Repositories.SqlChannelTemplateRepository.#ctor
  isExternal: false
  name: SqlChannelTemplateRepository
  nameWithType: SqlChannelTemplateRepository.SqlChannelTemplateRepository
  fullName: Warbler.Repositories.SqlChannelTemplateRepository.SqlChannelTemplateRepository
- uid: Warbler.Misc.WarblerDbContext
  commentId: T:Warbler.Misc.WarblerDbContext
  parent: Warbler.Misc
  isExternal: false
  name: WarblerDbContext
  nameWithType: WarblerDbContext
  fullName: Warbler.Misc.WarblerDbContext
- uid: Warbler.Misc
  commentId: N:Warbler.Misc
  isExternal: false
  name: Warbler.Misc
  nameWithType: Warbler.Misc
  fullName: Warbler.Misc
- uid: Warbler.Repositories.SqlChannelTemplateRepository.CreateAsync*
  commentId: Overload:Warbler.Repositories.SqlChannelTemplateRepository.CreateAsync
  isExternal: false
  name: CreateAsync
  nameWithType: SqlChannelTemplateRepository.CreateAsync
  fullName: Warbler.Repositories.SqlChannelTemplateRepository.CreateAsync
- uid: Warbler.Interfaces.IChannelTemplateRepository.CreateAsync(Warbler.Models.ChannelTemplate,System.Boolean)
  commentId: M:Warbler.Interfaces.IChannelTemplateRepository.CreateAsync(Warbler.Models.ChannelTemplate,System.Boolean)
  parent: Warbler.Interfaces.IChannelTemplateRepository
  isExternal: true
  name: CreateAsync(ChannelTemplate, Boolean)
  nameWithType: IChannelTemplateRepository.CreateAsync(ChannelTemplate, Boolean)
  fullName: Warbler.Interfaces.IChannelTemplateRepository.CreateAsync(Warbler.Models.ChannelTemplate, System.Boolean)
  spec.csharp:
  - uid: Warbler.Interfaces.IChannelTemplateRepository.CreateAsync(Warbler.Models.ChannelTemplate,System.Boolean)
    name: CreateAsync
    nameWithType: IChannelTemplateRepository.CreateAsync
    fullName: Warbler.Interfaces.IChannelTemplateRepository.CreateAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Warbler.Models.ChannelTemplate
    name: ChannelTemplate
    nameWithType: ChannelTemplate
    fullName: Warbler.Models.ChannelTemplate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Warbler.Interfaces.IChannelTemplateRepository.CreateAsync(Warbler.Models.ChannelTemplate,System.Boolean)
    name: CreateAsync
    nameWithType: IChannelTemplateRepository.CreateAsync
    fullName: Warbler.Interfaces.IChannelTemplateRepository.CreateAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Warbler.Models.ChannelTemplate
    name: ChannelTemplate
    nameWithType: ChannelTemplate
    fullName: Warbler.Models.ChannelTemplate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Warbler.Models.ChannelTemplate
  commentId: T:Warbler.Models.ChannelTemplate
  parent: Warbler.Models
  isExternal: false
  name: ChannelTemplate
  nameWithType: ChannelTemplate
  fullName: Warbler.Models.ChannelTemplate
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Task
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: Task
- uid: Warbler.Models
  commentId: N:Warbler.Models
  isExternal: false
  name: Warbler.Models
  nameWithType: Warbler.Models
  fullName: Warbler.Models
- uid: Warbler.Repositories.SqlChannelTemplateRepository.GetAsync*
  commentId: Overload:Warbler.Repositories.SqlChannelTemplateRepository.GetAsync
  isExternal: false
  name: GetAsync
  nameWithType: SqlChannelTemplateRepository.GetAsync
  fullName: Warbler.Repositories.SqlChannelTemplateRepository.GetAsync
- uid: Warbler.Interfaces.IChannelTemplateRepository.GetAsync
  commentId: M:Warbler.Interfaces.IChannelTemplateRepository.GetAsync
  parent: Warbler.Interfaces.IChannelTemplateRepository
  isExternal: false
  name: GetAsync()
  nameWithType: IChannelTemplateRepository.GetAsync()
  fullName: Warbler.Interfaces.IChannelTemplateRepository.GetAsync()
  spec.csharp:
  - uid: Warbler.Interfaces.IChannelTemplateRepository.GetAsync
    name: GetAsync
    nameWithType: IChannelTemplateRepository.GetAsync
    fullName: Warbler.Interfaces.IChannelTemplateRepository.GetAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Warbler.Interfaces.IChannelTemplateRepository.GetAsync
    name: GetAsync
    nameWithType: IChannelTemplateRepository.GetAsync
    fullName: Warbler.Interfaces.IChannelTemplateRepository.GetAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Task{System.Collections.Generic.List{Warbler.Models.ChannelTemplate}}
  commentId: '!:Task{System.Collections.Generic.List{Warbler.Models.ChannelTemplate}}'
  definition: Task`1
  name: Task<List<ChannelTemplate>>
  nameWithType: Task<List<ChannelTemplate>>
  fullName: Task<System.Collections.Generic.List<Warbler.Models.ChannelTemplate>>
  nameWithType.vb: Task(Of List(Of ChannelTemplate))
  fullName.vb: Task(Of System.Collections.Generic.List(Of Warbler.Models.ChannelTemplate))
  name.vb: Task(Of List(Of ChannelTemplate))
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Warbler.Models.ChannelTemplate
    name: ChannelTemplate
    nameWithType: ChannelTemplate
    fullName: Warbler.Models.ChannelTemplate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Warbler.Models.ChannelTemplate
    name: ChannelTemplate
    nameWithType: ChannelTemplate
    fullName: Warbler.Models.ChannelTemplate
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
