### YamlMime:ManagedReference
items:
- uid: Warbler.Repositories.SqlUniversityRepository
  commentId: T:Warbler.Repositories.SqlUniversityRepository
  id: SqlUniversityRepository
  parent: Warbler.Repositories
  children:
  - Warbler.Repositories.SqlUniversityRepository.#ctor(Warbler.Misc.WarblerDbContext)
  - Warbler.Repositories.SqlUniversityRepository.AllQueryable(QueryDepth)
  - Warbler.Repositories.SqlUniversityRepository.CreateAsync(NearByResult)
  - Warbler.Repositories.SqlUniversityRepository.LookupAsync(System.String)
  - Warbler.Repositories.SqlUniversityRepository.SaveAsync
  langs:
  - csharp
  - vb
  name: SqlUniversityRepository
  nameWithType: SqlUniversityRepository
  fullName: Warbler.Repositories.SqlUniversityRepository
  type: Class
  source:
    id: SqlUniversityRepository
    path: ''
    startLine: 2460
  assemblies:
  - cs.temp.dll
  namespace: Warbler.Repositories
  summary: "\nRuns queries against the SQL database using Entity Framework.\nLook at <xref href=\"Warbler.Interfaces.IUniversityRepository\" data-throw-if-not-resolved=\"false\"></xref> for docs.\n"
  example: []
  syntax:
    content: 'public class SqlUniversityRepository : IUniversityRepository'
    content.vb: >-
      Public Class SqlUniversityRepository
          Implements IUniversityRepository
  inheritance:
  - System.Object
  implements:
  - Warbler.Interfaces.IUniversityRepository
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Warbler.Repositories.SqlUniversityRepository.#ctor(Warbler.Misc.WarblerDbContext)
  commentId: M:Warbler.Repositories.SqlUniversityRepository.#ctor(Warbler.Misc.WarblerDbContext)
  id: '#ctor(Warbler.Misc.WarblerDbContext)'
  parent: Warbler.Repositories.SqlUniversityRepository
  langs:
  - csharp
  - vb
  name: SqlUniversityRepository(WarblerDbContext)
  nameWithType: SqlUniversityRepository.SqlUniversityRepository(WarblerDbContext)
  fullName: Warbler.Repositories.SqlUniversityRepository.SqlUniversityRepository(Warbler.Misc.WarblerDbContext)
  type: Constructor
  source:
    id: .ctor
    path: ''
    startLine: 2464
  assemblies:
  - cs.temp.dll
  namespace: Warbler.Repositories
  syntax:
    content: public SqlUniversityRepository(WarblerDbContext context)
    parameters:
    - id: context
      type: Warbler.Misc.WarblerDbContext
    content.vb: Public Sub New(context As WarblerDbContext)
  overload: Warbler.Repositories.SqlUniversityRepository.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Warbler.Repositories.SqlUniversityRepository.CreateAsync(NearByResult)
  commentId: M:Warbler.Repositories.SqlUniversityRepository.CreateAsync(NearByResult)
  id: CreateAsync(NearByResult)
  parent: Warbler.Repositories.SqlUniversityRepository
  langs:
  - csharp
  - vb
  name: CreateAsync(NearByResult)
  nameWithType: SqlUniversityRepository.CreateAsync(NearByResult)
  fullName: Warbler.Repositories.SqlUniversityRepository.CreateAsync(NearByResult)
  type: Method
  source:
    id: CreateAsync
    path: ''
    startLine: 2469
  assemblies:
  - cs.temp.dll
  namespace: Warbler.Repositories
  syntax:
    content: public Task<University> CreateAsync(NearByResult uni)
    parameters:
    - id: uni
      type: NearByResult
    return:
      type: Task{Warbler.Models.University}
    content.vb: Public Function CreateAsync(uni As NearByResult) As Task(Of University)
  overload: Warbler.Repositories.SqlUniversityRepository.CreateAsync*
  implements:
  - Warbler.Interfaces.IUniversityRepository.CreateAsync(NearByResult)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Warbler.Repositories.SqlUniversityRepository.SaveAsync
  commentId: M:Warbler.Repositories.SqlUniversityRepository.SaveAsync
  id: SaveAsync
  parent: Warbler.Repositories.SqlUniversityRepository
  langs:
  - csharp
  - vb
  name: SaveAsync()
  nameWithType: SqlUniversityRepository.SaveAsync()
  fullName: Warbler.Repositories.SqlUniversityRepository.SaveAsync()
  type: Method
  source:
    id: SaveAsync
    path: ''
    startLine: 2509
  assemblies:
  - cs.temp.dll
  namespace: Warbler.Repositories
  syntax:
    content: public Task SaveAsync()
    return:
      type: Task
    content.vb: Public Function SaveAsync As Task
  overload: Warbler.Repositories.SqlUniversityRepository.SaveAsync*
  implements:
  - Warbler.Interfaces.IUniversityRepository.SaveAsync
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Warbler.Repositories.SqlUniversityRepository.LookupAsync(System.String)
  commentId: M:Warbler.Repositories.SqlUniversityRepository.LookupAsync(System.String)
  id: LookupAsync(System.String)
  parent: Warbler.Repositories.SqlUniversityRepository
  langs:
  - csharp
  - vb
  name: LookupAsync(String)
  nameWithType: SqlUniversityRepository.LookupAsync(String)
  fullName: Warbler.Repositories.SqlUniversityRepository.LookupAsync(System.String)
  type: Method
  source:
    id: LookupAsync
    path: ''
    startLine: 2514
  assemblies:
  - cs.temp.dll
  namespace: Warbler.Repositories
  syntax:
    content: public Task<University> LookupAsync(string placeId)
    parameters:
    - id: placeId
      type: System.String
    return:
      type: Task{Warbler.Models.University}
    content.vb: Public Function LookupAsync(placeId As String) As Task(Of University)
  overload: Warbler.Repositories.SqlUniversityRepository.LookupAsync*
  implements:
  - Warbler.Interfaces.IUniversityRepository.LookupAsync(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Warbler.Repositories.SqlUniversityRepository.AllQueryable(QueryDepth)
  commentId: M:Warbler.Repositories.SqlUniversityRepository.AllQueryable(QueryDepth)
  id: AllQueryable(QueryDepth)
  parent: Warbler.Repositories.SqlUniversityRepository
  langs:
  - csharp
  - vb
  name: AllQueryable(QueryDepth)
  nameWithType: SqlUniversityRepository.AllQueryable(QueryDepth)
  fullName: Warbler.Repositories.SqlUniversityRepository.AllQueryable(QueryDepth)
  type: Method
  source:
    id: AllQueryable
    path: ''
    startLine: 2527
  assemblies:
  - cs.temp.dll
  namespace: Warbler.Repositories
  syntax:
    content: public IQueryable<University> AllQueryable(QueryDepth depth)
    parameters:
    - id: depth
      type: QueryDepth
    return:
      type: IQueryable{Warbler.Models.University}
    content.vb: Public Function AllQueryable(depth As QueryDepth) As IQueryable(Of University)
  overload: Warbler.Repositories.SqlUniversityRepository.AllQueryable*
  implements:
  - Warbler.Interfaces.IUniversityRepository.AllQueryable(QueryDepth)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Warbler.Interfaces.IUniversityRepository
  commentId: T:Warbler.Interfaces.IUniversityRepository
  parent: Warbler.Interfaces
  isExternal: false
  name: IUniversityRepository
  nameWithType: IUniversityRepository
  fullName: Warbler.Interfaces.IUniversityRepository
- uid: Warbler.Repositories
  commentId: N:Warbler.Repositories
  isExternal: false
  name: Warbler.Repositories
  nameWithType: Warbler.Repositories
  fullName: Warbler.Repositories
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Warbler.Interfaces
  commentId: N:Warbler.Interfaces
  isExternal: false
  name: Warbler.Interfaces
  nameWithType: Warbler.Interfaces
  fullName: Warbler.Interfaces
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Warbler.Repositories.SqlUniversityRepository.#ctor*
  commentId: Overload:Warbler.Repositories.SqlUniversityRepository.#ctor
  isExternal: false
  name: SqlUniversityRepository
  nameWithType: SqlUniversityRepository.SqlUniversityRepository
  fullName: Warbler.Repositories.SqlUniversityRepository.SqlUniversityRepository
- uid: Warbler.Misc.WarblerDbContext
  commentId: T:Warbler.Misc.WarblerDbContext
  parent: Warbler.Misc
  isExternal: false
  name: WarblerDbContext
  nameWithType: WarblerDbContext
  fullName: Warbler.Misc.WarblerDbContext
- uid: Warbler.Misc
  commentId: N:Warbler.Misc
  isExternal: false
  name: Warbler.Misc
  nameWithType: Warbler.Misc
  fullName: Warbler.Misc
- uid: Warbler.Repositories.SqlUniversityRepository.CreateAsync*
  commentId: Overload:Warbler.Repositories.SqlUniversityRepository.CreateAsync
  isExternal: false
  name: CreateAsync
  nameWithType: SqlUniversityRepository.CreateAsync
  fullName: Warbler.Repositories.SqlUniversityRepository.CreateAsync
- uid: Warbler.Interfaces.IUniversityRepository.CreateAsync(NearByResult)
  commentId: M:Warbler.Interfaces.IUniversityRepository.CreateAsync(NearByResult)
  parent: Warbler.Interfaces.IUniversityRepository
  isExternal: true
  name: CreateAsync(NearByResult)
  nameWithType: IUniversityRepository.CreateAsync(NearByResult)
  fullName: Warbler.Interfaces.IUniversityRepository.CreateAsync(NearByResult)
  spec.csharp:
  - uid: Warbler.Interfaces.IUniversityRepository.CreateAsync(NearByResult)
    name: CreateAsync
    nameWithType: IUniversityRepository.CreateAsync
    fullName: Warbler.Interfaces.IUniversityRepository.CreateAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: NearByResult
    name: NearByResult
    nameWithType: NearByResult
    fullName: NearByResult
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Warbler.Interfaces.IUniversityRepository.CreateAsync(NearByResult)
    name: CreateAsync
    nameWithType: IUniversityRepository.CreateAsync
    fullName: Warbler.Interfaces.IUniversityRepository.CreateAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: NearByResult
    name: NearByResult
    nameWithType: NearByResult
    fullName: NearByResult
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NearByResult
  isExternal: true
  name: NearByResult
  nameWithType: NearByResult
  fullName: NearByResult
- uid: Task{Warbler.Models.University}
  commentId: '!:Task{Warbler.Models.University}'
  definition: Task`1
  name: Task<University>
  nameWithType: Task<University>
  fullName: Task<Warbler.Models.University>
  nameWithType.vb: Task(Of University)
  fullName.vb: Task(Of Warbler.Models.University)
  name.vb: Task(Of University)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Warbler.Models.University
    name: University
    nameWithType: University
    fullName: Warbler.Models.University
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Warbler.Models.University
    name: University
    nameWithType: University
    fullName: Warbler.Models.University
  - name: )
    nameWithType: )
    fullName: )
- uid: Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Warbler.Repositories.SqlUniversityRepository.SaveAsync*
  commentId: Overload:Warbler.Repositories.SqlUniversityRepository.SaveAsync
  isExternal: false
  name: SaveAsync
  nameWithType: SqlUniversityRepository.SaveAsync
  fullName: Warbler.Repositories.SqlUniversityRepository.SaveAsync
- uid: Warbler.Interfaces.IUniversityRepository.SaveAsync
  commentId: M:Warbler.Interfaces.IUniversityRepository.SaveAsync
  parent: Warbler.Interfaces.IUniversityRepository
  isExternal: false
  name: SaveAsync()
  nameWithType: IUniversityRepository.SaveAsync()
  fullName: Warbler.Interfaces.IUniversityRepository.SaveAsync()
  spec.csharp:
  - uid: Warbler.Interfaces.IUniversityRepository.SaveAsync
    name: SaveAsync
    nameWithType: IUniversityRepository.SaveAsync
    fullName: Warbler.Interfaces.IUniversityRepository.SaveAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Warbler.Interfaces.IUniversityRepository.SaveAsync
    name: SaveAsync
    nameWithType: IUniversityRepository.SaveAsync
    fullName: Warbler.Interfaces.IUniversityRepository.SaveAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Task
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: Task
- uid: Warbler.Repositories.SqlUniversityRepository.LookupAsync*
  commentId: Overload:Warbler.Repositories.SqlUniversityRepository.LookupAsync
  isExternal: false
  name: LookupAsync
  nameWithType: SqlUniversityRepository.LookupAsync
  fullName: Warbler.Repositories.SqlUniversityRepository.LookupAsync
- uid: Warbler.Interfaces.IUniversityRepository.LookupAsync(System.String)
  commentId: M:Warbler.Interfaces.IUniversityRepository.LookupAsync(System.String)
  parent: Warbler.Interfaces.IUniversityRepository
  isExternal: true
  name: LookupAsync(String)
  nameWithType: IUniversityRepository.LookupAsync(String)
  fullName: Warbler.Interfaces.IUniversityRepository.LookupAsync(System.String)
  spec.csharp:
  - uid: Warbler.Interfaces.IUniversityRepository.LookupAsync(System.String)
    name: LookupAsync
    nameWithType: IUniversityRepository.LookupAsync
    fullName: Warbler.Interfaces.IUniversityRepository.LookupAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Warbler.Interfaces.IUniversityRepository.LookupAsync(System.String)
    name: LookupAsync
    nameWithType: IUniversityRepository.LookupAsync
    fullName: Warbler.Interfaces.IUniversityRepository.LookupAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Warbler.Repositories.SqlUniversityRepository.AllQueryable*
  commentId: Overload:Warbler.Repositories.SqlUniversityRepository.AllQueryable
  isExternal: false
  name: AllQueryable
  nameWithType: SqlUniversityRepository.AllQueryable
  fullName: Warbler.Repositories.SqlUniversityRepository.AllQueryable
- uid: Warbler.Interfaces.IUniversityRepository.AllQueryable(QueryDepth)
  commentId: M:Warbler.Interfaces.IUniversityRepository.AllQueryable(QueryDepth)
  parent: Warbler.Interfaces.IUniversityRepository
  isExternal: true
  name: AllQueryable(QueryDepth)
  nameWithType: IUniversityRepository.AllQueryable(QueryDepth)
  fullName: Warbler.Interfaces.IUniversityRepository.AllQueryable(QueryDepth)
  spec.csharp:
  - uid: Warbler.Interfaces.IUniversityRepository.AllQueryable(QueryDepth)
    name: AllQueryable
    nameWithType: IUniversityRepository.AllQueryable
    fullName: Warbler.Interfaces.IUniversityRepository.AllQueryable
  - name: (
    nameWithType: (
    fullName: (
  - uid: QueryDepth
    name: QueryDepth
    nameWithType: QueryDepth
    fullName: QueryDepth
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Warbler.Interfaces.IUniversityRepository.AllQueryable(QueryDepth)
    name: AllQueryable
    nameWithType: IUniversityRepository.AllQueryable
    fullName: Warbler.Interfaces.IUniversityRepository.AllQueryable
  - name: (
    nameWithType: (
    fullName: (
  - uid: QueryDepth
    name: QueryDepth
    nameWithType: QueryDepth
    fullName: QueryDepth
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: QueryDepth
  isExternal: true
  name: QueryDepth
  nameWithType: QueryDepth
  fullName: QueryDepth
- uid: IQueryable{Warbler.Models.University}
  commentId: '!:IQueryable{Warbler.Models.University}'
  definition: IQueryable`1
  name: IQueryable<University>
  nameWithType: IQueryable<University>
  fullName: IQueryable<Warbler.Models.University>
  nameWithType.vb: IQueryable(Of University)
  fullName.vb: IQueryable(Of Warbler.Models.University)
  name.vb: IQueryable(Of University)
  spec.csharp:
  - uid: IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Warbler.Models.University
    name: University
    nameWithType: University
    fullName: Warbler.Models.University
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Warbler.Models.University
    name: University
    nameWithType: University
    fullName: Warbler.Models.University
  - name: )
    nameWithType: )
    fullName: )
- uid: IQueryable`1
  isExternal: true
  name: IQueryable<>
  nameWithType: IQueryable<>
  fullName: IQueryable<>
  nameWithType.vb: IQueryable(Of )
  fullName.vb: IQueryable(Of )
  name.vb: IQueryable(Of )
  spec.csharp:
  - uid: IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
