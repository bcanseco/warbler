### YamlMime:ManagedReference
items:
- uid: Warbler.Repositories.SqlUserRepository
  commentId: T:Warbler.Repositories.SqlUserRepository
  id: SqlUserRepository
  parent: Warbler.Repositories
  children:
  - Warbler.Repositories.SqlUserRepository.#ctor(Warbler.Misc.WarblerDbContext)
  - Warbler.Repositories.SqlUserRepository.FindByNameAsync(System.String)
  - Warbler.Repositories.SqlUserRepository.IsNewAsync(Warbler.Models.User)
  - Warbler.Repositories.SqlUserRepository.SetOnlineAsync(Warbler.Models.User,System.Boolean)
  langs:
  - csharp
  - vb
  name: SqlUserRepository
  nameWithType: SqlUserRepository
  fullName: Warbler.Repositories.SqlUserRepository
  type: Class
  source:
    id: SqlUserRepository
    path: ''
    startLine: 2576
  assemblies:
  - cs.temp.dll
  namespace: Warbler.Repositories
  summary: "\nRuns queries against the SQL database using Entity Framework.\nLook at <xref href=\"Warbler.Interfaces.IUserRepository\" data-throw-if-not-resolved=\"false\"></xref> for docs.\n"
  example: []
  syntax:
    content: 'public class SqlUserRepository : IUserRepository'
    content.vb: >-
      Public Class SqlUserRepository
          Implements IUserRepository
  inheritance:
  - System.Object
  implements:
  - Warbler.Interfaces.IUserRepository
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Warbler.Repositories.SqlUserRepository.#ctor(Warbler.Misc.WarblerDbContext)
  commentId: M:Warbler.Repositories.SqlUserRepository.#ctor(Warbler.Misc.WarblerDbContext)
  id: '#ctor(Warbler.Misc.WarblerDbContext)'
  parent: Warbler.Repositories.SqlUserRepository
  langs:
  - csharp
  - vb
  name: SqlUserRepository(WarblerDbContext)
  nameWithType: SqlUserRepository.SqlUserRepository(WarblerDbContext)
  fullName: Warbler.Repositories.SqlUserRepository.SqlUserRepository(Warbler.Misc.WarblerDbContext)
  type: Constructor
  source:
    id: .ctor
    path: ''
    startLine: 2580
  assemblies:
  - cs.temp.dll
  namespace: Warbler.Repositories
  syntax:
    content: public SqlUserRepository(WarblerDbContext context)
    parameters:
    - id: context
      type: Warbler.Misc.WarblerDbContext
    content.vb: Public Sub New(context As WarblerDbContext)
  overload: Warbler.Repositories.SqlUserRepository.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Warbler.Repositories.SqlUserRepository.IsNewAsync(Warbler.Models.User)
  commentId: M:Warbler.Repositories.SqlUserRepository.IsNewAsync(Warbler.Models.User)
  id: IsNewAsync(Warbler.Models.User)
  parent: Warbler.Repositories.SqlUserRepository
  langs:
  - csharp
  - vb
  name: IsNewAsync(User)
  nameWithType: SqlUserRepository.IsNewAsync(User)
  fullName: Warbler.Repositories.SqlUserRepository.IsNewAsync(Warbler.Models.User)
  type: Method
  source:
    id: IsNewAsync
    path: ''
    startLine: 2585
  assemblies:
  - cs.temp.dll
  namespace: Warbler.Repositories
  syntax:
    content: public Task<bool> IsNewAsync(User user)
    parameters:
    - id: user
      type: Warbler.Models.User
    return:
      type: Task{System.Boolean}
    content.vb: Public Function IsNewAsync(user As User) As Task(Of Boolean)
  overload: Warbler.Repositories.SqlUserRepository.IsNewAsync*
  implements:
  - Warbler.Interfaces.IUserRepository.IsNewAsync(Warbler.Models.User)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Warbler.Repositories.SqlUserRepository.SetOnlineAsync(Warbler.Models.User,System.Boolean)
  commentId: M:Warbler.Repositories.SqlUserRepository.SetOnlineAsync(Warbler.Models.User,System.Boolean)
  id: SetOnlineAsync(Warbler.Models.User,System.Boolean)
  parent: Warbler.Repositories.SqlUserRepository
  langs:
  - csharp
  - vb
  name: SetOnlineAsync(User, Boolean)
  nameWithType: SqlUserRepository.SetOnlineAsync(User, Boolean)
  fullName: Warbler.Repositories.SqlUserRepository.SetOnlineAsync(Warbler.Models.User, System.Boolean)
  type: Method
  source:
    id: SetOnlineAsync
    path: ''
    startLine: 2594
  assemblies:
  - cs.temp.dll
  namespace: Warbler.Repositories
  syntax:
    content: public Task SetOnlineAsync(User user, bool isOnline)
    parameters:
    - id: user
      type: Warbler.Models.User
    - id: isOnline
      type: System.Boolean
    return:
      type: Task
    content.vb: Public Function SetOnlineAsync(user As User, isOnline As Boolean) As Task
  overload: Warbler.Repositories.SqlUserRepository.SetOnlineAsync*
  implements:
  - Warbler.Interfaces.IUserRepository.SetOnlineAsync(Warbler.Models.User,System.Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Warbler.Repositories.SqlUserRepository.FindByNameAsync(System.String)
  commentId: M:Warbler.Repositories.SqlUserRepository.FindByNameAsync(System.String)
  id: FindByNameAsync(System.String)
  parent: Warbler.Repositories.SqlUserRepository
  langs:
  - csharp
  - vb
  name: FindByNameAsync(String)
  nameWithType: SqlUserRepository.FindByNameAsync(String)
  fullName: Warbler.Repositories.SqlUserRepository.FindByNameAsync(System.String)
  type: Method
  source:
    id: FindByNameAsync
    path: ''
    startLine: 2600
  assemblies:
  - cs.temp.dll
  namespace: Warbler.Repositories
  syntax:
    content: public Task<User> FindByNameAsync(string userName)
    parameters:
    - id: userName
      type: System.String
    return:
      type: Task{Warbler.Models.User}
    content.vb: Public Function FindByNameAsync(userName As String) As Task(Of User)
  overload: Warbler.Repositories.SqlUserRepository.FindByNameAsync*
  implements:
  - Warbler.Interfaces.IUserRepository.FindByNameAsync(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Warbler.Interfaces.IUserRepository
  commentId: T:Warbler.Interfaces.IUserRepository
  parent: Warbler.Interfaces
  isExternal: false
  name: IUserRepository
  nameWithType: IUserRepository
  fullName: Warbler.Interfaces.IUserRepository
- uid: Warbler.Repositories
  commentId: N:Warbler.Repositories
  isExternal: false
  name: Warbler.Repositories
  nameWithType: Warbler.Repositories
  fullName: Warbler.Repositories
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Warbler.Interfaces
  commentId: N:Warbler.Interfaces
  isExternal: false
  name: Warbler.Interfaces
  nameWithType: Warbler.Interfaces
  fullName: Warbler.Interfaces
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Warbler.Repositories.SqlUserRepository.#ctor*
  commentId: Overload:Warbler.Repositories.SqlUserRepository.#ctor
  isExternal: false
  name: SqlUserRepository
  nameWithType: SqlUserRepository.SqlUserRepository
  fullName: Warbler.Repositories.SqlUserRepository.SqlUserRepository
- uid: Warbler.Misc.WarblerDbContext
  commentId: T:Warbler.Misc.WarblerDbContext
  parent: Warbler.Misc
  isExternal: false
  name: WarblerDbContext
  nameWithType: WarblerDbContext
  fullName: Warbler.Misc.WarblerDbContext
- uid: Warbler.Misc
  commentId: N:Warbler.Misc
  isExternal: false
  name: Warbler.Misc
  nameWithType: Warbler.Misc
  fullName: Warbler.Misc
- uid: Warbler.Repositories.SqlUserRepository.IsNewAsync*
  commentId: Overload:Warbler.Repositories.SqlUserRepository.IsNewAsync
  isExternal: false
  name: IsNewAsync
  nameWithType: SqlUserRepository.IsNewAsync
  fullName: Warbler.Repositories.SqlUserRepository.IsNewAsync
- uid: Warbler.Interfaces.IUserRepository.IsNewAsync(Warbler.Models.User)
  commentId: M:Warbler.Interfaces.IUserRepository.IsNewAsync(Warbler.Models.User)
  parent: Warbler.Interfaces.IUserRepository
  isExternal: false
  name: IsNewAsync(User)
  nameWithType: IUserRepository.IsNewAsync(User)
  fullName: Warbler.Interfaces.IUserRepository.IsNewAsync(Warbler.Models.User)
  spec.csharp:
  - uid: Warbler.Interfaces.IUserRepository.IsNewAsync(Warbler.Models.User)
    name: IsNewAsync
    nameWithType: IUserRepository.IsNewAsync
    fullName: Warbler.Interfaces.IUserRepository.IsNewAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Warbler.Models.User
    name: User
    nameWithType: User
    fullName: Warbler.Models.User
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Warbler.Interfaces.IUserRepository.IsNewAsync(Warbler.Models.User)
    name: IsNewAsync
    nameWithType: IUserRepository.IsNewAsync
    fullName: Warbler.Interfaces.IUserRepository.IsNewAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Warbler.Models.User
    name: User
    nameWithType: User
    fullName: Warbler.Models.User
  - name: )
    nameWithType: )
    fullName: )
- uid: Warbler.Models.User
  commentId: T:Warbler.Models.User
  parent: Warbler.Models
  isExternal: false
  name: User
  nameWithType: User
  fullName: Warbler.Models.User
- uid: Task{System.Boolean}
  commentId: '!:Task{System.Boolean}'
  definition: Task`1
  name: Task<Boolean>
  nameWithType: Task<Boolean>
  fullName: Task<System.Boolean>
  nameWithType.vb: Task(Of Boolean)
  fullName.vb: Task(Of System.Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Warbler.Models
  commentId: N:Warbler.Models
  isExternal: false
  name: Warbler.Models
  nameWithType: Warbler.Models
  fullName: Warbler.Models
- uid: Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Warbler.Repositories.SqlUserRepository.SetOnlineAsync*
  commentId: Overload:Warbler.Repositories.SqlUserRepository.SetOnlineAsync
  isExternal: false
  name: SetOnlineAsync
  nameWithType: SqlUserRepository.SetOnlineAsync
  fullName: Warbler.Repositories.SqlUserRepository.SetOnlineAsync
- uid: Warbler.Interfaces.IUserRepository.SetOnlineAsync(Warbler.Models.User,System.Boolean)
  commentId: M:Warbler.Interfaces.IUserRepository.SetOnlineAsync(Warbler.Models.User,System.Boolean)
  parent: Warbler.Interfaces.IUserRepository
  isExternal: true
  name: SetOnlineAsync(User, Boolean)
  nameWithType: IUserRepository.SetOnlineAsync(User, Boolean)
  fullName: Warbler.Interfaces.IUserRepository.SetOnlineAsync(Warbler.Models.User, System.Boolean)
  spec.csharp:
  - uid: Warbler.Interfaces.IUserRepository.SetOnlineAsync(Warbler.Models.User,System.Boolean)
    name: SetOnlineAsync
    nameWithType: IUserRepository.SetOnlineAsync
    fullName: Warbler.Interfaces.IUserRepository.SetOnlineAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Warbler.Models.User
    name: User
    nameWithType: User
    fullName: Warbler.Models.User
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Warbler.Interfaces.IUserRepository.SetOnlineAsync(Warbler.Models.User,System.Boolean)
    name: SetOnlineAsync
    nameWithType: IUserRepository.SetOnlineAsync
    fullName: Warbler.Interfaces.IUserRepository.SetOnlineAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Warbler.Models.User
    name: User
    nameWithType: User
    fullName: Warbler.Models.User
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Task
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: Task
- uid: Warbler.Repositories.SqlUserRepository.FindByNameAsync*
  commentId: Overload:Warbler.Repositories.SqlUserRepository.FindByNameAsync
  isExternal: false
  name: FindByNameAsync
  nameWithType: SqlUserRepository.FindByNameAsync
  fullName: Warbler.Repositories.SqlUserRepository.FindByNameAsync
- uid: Warbler.Interfaces.IUserRepository.FindByNameAsync(System.String)
  commentId: M:Warbler.Interfaces.IUserRepository.FindByNameAsync(System.String)
  parent: Warbler.Interfaces.IUserRepository
  isExternal: true
  name: FindByNameAsync(String)
  nameWithType: IUserRepository.FindByNameAsync(String)
  fullName: Warbler.Interfaces.IUserRepository.FindByNameAsync(System.String)
  spec.csharp:
  - uid: Warbler.Interfaces.IUserRepository.FindByNameAsync(System.String)
    name: FindByNameAsync
    nameWithType: IUserRepository.FindByNameAsync
    fullName: Warbler.Interfaces.IUserRepository.FindByNameAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Warbler.Interfaces.IUserRepository.FindByNameAsync(System.String)
    name: FindByNameAsync
    nameWithType: IUserRepository.FindByNameAsync
    fullName: Warbler.Interfaces.IUserRepository.FindByNameAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Task{Warbler.Models.User}
  commentId: '!:Task{Warbler.Models.User}'
  definition: Task`1
  name: Task<User>
  nameWithType: Task<User>
  fullName: Task<Warbler.Models.User>
  nameWithType.vb: Task(Of User)
  fullName.vb: Task(Of Warbler.Models.User)
  name.vb: Task(Of User)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Warbler.Models.User
    name: User
    nameWithType: User
    fullName: Warbler.Models.User
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Warbler.Models.User
    name: User
    nameWithType: User
    fullName: Warbler.Models.User
  - name: )
    nameWithType: )
    fullName: )
