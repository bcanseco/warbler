### YamlMime:ManagedReference
items:
- uid: Warbler.Services.ChannelTemplateService
  commentId: T:Warbler.Services.ChannelTemplateService
  id: ChannelTemplateService
  parent: Warbler.Services
  children:
  - Warbler.Services.ChannelTemplateService.#ctor(Warbler.Interfaces.IChannelTemplateRepository)
  - Warbler.Services.ChannelTemplateService.CreateDefaultTemplatesAsync
  - Warbler.Services.ChannelTemplateService.GetAsync
  langs:
  - csharp
  - vb
  name: ChannelTemplateService
  nameWithType: ChannelTemplateService
  fullName: Warbler.Services.ChannelTemplateService
  type: Class
  source:
    id: ChannelTemplateService
    path: ''
    startLine: 3581
  assemblies:
  - cs.temp.dll
  namespace: Warbler.Services
  summary: "\nThe business logic layer for manipulation of channel templates.\n"
  example: []
  syntax:
    content: public class ChannelTemplateService
    content.vb: Public Class ChannelTemplateService
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Warbler.Services.ChannelTemplateService.#ctor(Warbler.Interfaces.IChannelTemplateRepository)
  commentId: M:Warbler.Services.ChannelTemplateService.#ctor(Warbler.Interfaces.IChannelTemplateRepository)
  id: '#ctor(Warbler.Interfaces.IChannelTemplateRepository)'
  parent: Warbler.Services.ChannelTemplateService
  langs:
  - csharp
  - vb
  name: ChannelTemplateService(IChannelTemplateRepository)
  nameWithType: ChannelTemplateService.ChannelTemplateService(IChannelTemplateRepository)
  fullName: Warbler.Services.ChannelTemplateService.ChannelTemplateService(Warbler.Interfaces.IChannelTemplateRepository)
  type: Constructor
  source:
    id: .ctor
    path: ''
    startLine: 3585
  assemblies:
  - cs.temp.dll
  namespace: Warbler.Services
  syntax:
    content: public ChannelTemplateService(IChannelTemplateRepository repository)
    parameters:
    - id: repository
      type: Warbler.Interfaces.IChannelTemplateRepository
    content.vb: Public Sub New(repository As IChannelTemplateRepository)
  overload: Warbler.Services.ChannelTemplateService.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Warbler.Services.ChannelTemplateService.CreateDefaultTemplatesAsync
  commentId: M:Warbler.Services.ChannelTemplateService.CreateDefaultTemplatesAsync
  id: CreateDefaultTemplatesAsync
  parent: Warbler.Services.ChannelTemplateService
  langs:
  - csharp
  - vb
  name: CreateDefaultTemplatesAsync()
  nameWithType: ChannelTemplateService.CreateDefaultTemplatesAsync()
  fullName: Warbler.Services.ChannelTemplateService.CreateDefaultTemplatesAsync()
  type: Method
  source:
    id: CreateDefaultTemplatesAsync
    path: ''
    startLine: 3593
  assemblies:
  - cs.temp.dll
  namespace: Warbler.Services
  summary: "\nLoads the database up with a default set of channel templates.\n"
  example: []
  syntax:
    content: public Task CreateDefaultTemplatesAsync()
    return:
      type: Task
    content.vb: Public Function CreateDefaultTemplatesAsync As Task
  overload: Warbler.Services.ChannelTemplateService.CreateDefaultTemplatesAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Warbler.Services.ChannelTemplateService.GetAsync
  commentId: M:Warbler.Services.ChannelTemplateService.GetAsync
  id: GetAsync
  parent: Warbler.Services.ChannelTemplateService
  langs:
  - csharp
  - vb
  name: GetAsync()
  nameWithType: ChannelTemplateService.GetAsync()
  fullName: Warbler.Services.ChannelTemplateService.GetAsync()
  type: Method
  source:
    id: GetAsync
    path: ''
    startLine: 3604
  assemblies:
  - cs.temp.dll
  namespace: Warbler.Services
  syntax:
    content: public Task<List<ChannelTemplate>> GetAsync()
    return:
      type: Task{System.Collections.Generic.List{Warbler.Models.ChannelTemplate}}
    content.vb: Public Function GetAsync As Task(Of List(Of ChannelTemplate))
  overload: Warbler.Services.ChannelTemplateService.GetAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Warbler.Services
  commentId: N:Warbler.Services
  isExternal: false
  name: Warbler.Services
  nameWithType: Warbler.Services
  fullName: Warbler.Services
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Warbler.Services.ChannelTemplateService.#ctor*
  commentId: Overload:Warbler.Services.ChannelTemplateService.#ctor
  isExternal: false
  name: ChannelTemplateService
  nameWithType: ChannelTemplateService.ChannelTemplateService
  fullName: Warbler.Services.ChannelTemplateService.ChannelTemplateService
- uid: Warbler.Interfaces.IChannelTemplateRepository
  commentId: T:Warbler.Interfaces.IChannelTemplateRepository
  parent: Warbler.Interfaces
  isExternal: false
  name: IChannelTemplateRepository
  nameWithType: IChannelTemplateRepository
  fullName: Warbler.Interfaces.IChannelTemplateRepository
- uid: Warbler.Interfaces
  commentId: N:Warbler.Interfaces
  isExternal: false
  name: Warbler.Interfaces
  nameWithType: Warbler.Interfaces
  fullName: Warbler.Interfaces
- uid: Warbler.Services.ChannelTemplateService.CreateDefaultTemplatesAsync*
  commentId: Overload:Warbler.Services.ChannelTemplateService.CreateDefaultTemplatesAsync
  isExternal: false
  name: CreateDefaultTemplatesAsync
  nameWithType: ChannelTemplateService.CreateDefaultTemplatesAsync
  fullName: Warbler.Services.ChannelTemplateService.CreateDefaultTemplatesAsync
- uid: Task
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: Task
- uid: Warbler.Services.ChannelTemplateService.GetAsync*
  commentId: Overload:Warbler.Services.ChannelTemplateService.GetAsync
  isExternal: false
  name: GetAsync
  nameWithType: ChannelTemplateService.GetAsync
  fullName: Warbler.Services.ChannelTemplateService.GetAsync
- uid: Task{System.Collections.Generic.List{Warbler.Models.ChannelTemplate}}
  commentId: '!:Task{System.Collections.Generic.List{Warbler.Models.ChannelTemplate}}'
  definition: Task`1
  name: Task<List<ChannelTemplate>>
  nameWithType: Task<List<ChannelTemplate>>
  fullName: Task<System.Collections.Generic.List<Warbler.Models.ChannelTemplate>>
  nameWithType.vb: Task(Of List(Of ChannelTemplate))
  fullName.vb: Task(Of System.Collections.Generic.List(Of Warbler.Models.ChannelTemplate))
  name.vb: Task(Of List(Of ChannelTemplate))
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Warbler.Models.ChannelTemplate
    name: ChannelTemplate
    nameWithType: ChannelTemplate
    fullName: Warbler.Models.ChannelTemplate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Warbler.Models.ChannelTemplate
    name: ChannelTemplate
    nameWithType: ChannelTemplate
    fullName: Warbler.Models.ChannelTemplate
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
