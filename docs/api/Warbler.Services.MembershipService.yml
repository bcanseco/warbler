### YamlMime:ManagedReference
items:
- uid: Warbler.Services.MembershipService
  commentId: T:Warbler.Services.MembershipService
  id: MembershipService
  parent: Warbler.Services
  children:
  - Warbler.Services.MembershipService.#ctor(Warbler.Interfaces.IMembershipRepository)
  - Warbler.Services.MembershipService.AllChannelsForAsync(Warbler.Models.User)
  - Warbler.Services.MembershipService.AllMembershipsForAsync(Warbler.Models.Channel)
  - Warbler.Services.MembershipService.AllMembershipsForAsync(Warbler.Models.User)
  langs:
  - csharp
  - vb
  name: MembershipService
  nameWithType: MembershipService
  fullName: Warbler.Services.MembershipService
  type: Class
  source:
    id: MembershipService
    path: ''
    startLine: 3039
  assemblies:
  - cs.temp.dll
  namespace: Warbler.Services
  summary: "\nThe business logic layer for manipulation of membership data.\n"
  example: []
  syntax:
    content: public class MembershipService
    content.vb: Public Class MembershipService
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Warbler.Services.MembershipService.#ctor(Warbler.Interfaces.IMembershipRepository)
  commentId: M:Warbler.Services.MembershipService.#ctor(Warbler.Interfaces.IMembershipRepository)
  id: '#ctor(Warbler.Interfaces.IMembershipRepository)'
  parent: Warbler.Services.MembershipService
  langs:
  - csharp
  - vb
  name: MembershipService(IMembershipRepository)
  nameWithType: MembershipService.MembershipService(IMembershipRepository)
  fullName: Warbler.Services.MembershipService.MembershipService(Warbler.Interfaces.IMembershipRepository)
  type: Constructor
  source:
    id: .ctor
    path: ''
    startLine: 3043
  assemblies:
  - cs.temp.dll
  namespace: Warbler.Services
  syntax:
    content: public MembershipService(IMembershipRepository repository)
    parameters:
    - id: repository
      type: Warbler.Interfaces.IMembershipRepository
    content.vb: Public Sub New(repository As IMembershipRepository)
  overload: Warbler.Services.MembershipService.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Warbler.Services.MembershipService.AllChannelsForAsync(Warbler.Models.User)
  commentId: M:Warbler.Services.MembershipService.AllChannelsForAsync(Warbler.Models.User)
  id: AllChannelsForAsync(Warbler.Models.User)
  parent: Warbler.Services.MembershipService
  langs:
  - csharp
  - vb
  name: AllChannelsForAsync(User)
  nameWithType: MembershipService.AllChannelsForAsync(User)
  fullName: Warbler.Services.MembershipService.AllChannelsForAsync(Warbler.Models.User)
  type: Method
  source:
    id: AllChannelsForAsync
    path: ''
    startLine: 3053
  assemblies:
  - cs.temp.dll
  namespace: Warbler.Services
  summary: "\nReturns a collection of channels that the user is a member of.\nChannels include filled-in server and university props.\n"
  example: []
  syntax:
    content: public Task<ICollection<Channel>> AllChannelsForAsync(User user)
    parameters:
    - id: user
      type: Warbler.Models.User
      description: The user to match against.
    return:
      type: Task{ICollection{Warbler.Models.Channel}}
    content.vb: Public Function AllChannelsForAsync(user As User) As Task(Of ICollection(Of Channel))
  overload: Warbler.Services.MembershipService.AllChannelsForAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Warbler.Services.MembershipService.AllMembershipsForAsync(Warbler.Models.Channel)
  commentId: M:Warbler.Services.MembershipService.AllMembershipsForAsync(Warbler.Models.Channel)
  id: AllMembershipsForAsync(Warbler.Models.Channel)
  parent: Warbler.Services.MembershipService
  langs:
  - csharp
  - vb
  name: AllMembershipsForAsync(Channel)
  nameWithType: MembershipService.AllMembershipsForAsync(Channel)
  fullName: Warbler.Services.MembershipService.AllMembershipsForAsync(Warbler.Models.Channel)
  type: Method
  source:
    id: AllMembershipsForAsync
    path: ''
    startLine: 3062
  assemblies:
  - cs.temp.dll
  namespace: Warbler.Services
  summary: "\nReturns a collection of memberships belonging to a channel.\n"
  example: []
  syntax:
    content: public Task<ICollection<Membership>> AllMembershipsForAsync(Channel channel)
    parameters:
    - id: channel
      type: Warbler.Models.Channel
      description: The channel to fetch memberships for.
    return:
      type: Task{ICollection{Warbler.Models.Membership}}
    content.vb: Public Function AllMembershipsForAsync(channel As Channel) As Task(Of ICollection(Of Membership))
  overload: Warbler.Services.MembershipService.AllMembershipsForAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Warbler.Services.MembershipService.AllMembershipsForAsync(Warbler.Models.User)
  commentId: M:Warbler.Services.MembershipService.AllMembershipsForAsync(Warbler.Models.User)
  id: AllMembershipsForAsync(Warbler.Models.User)
  parent: Warbler.Services.MembershipService
  langs:
  - csharp
  - vb
  name: AllMembershipsForAsync(User)
  nameWithType: MembershipService.AllMembershipsForAsync(User)
  fullName: Warbler.Services.MembershipService.AllMembershipsForAsync(Warbler.Models.User)
  type: Method
  source:
    id: AllMembershipsForAsync
    path: ''
    startLine: 3069
  assemblies:
  - cs.temp.dll
  namespace: Warbler.Services
  summary: "\nReturns a collection of memberships belonging to a user.\n"
  example: []
  syntax:
    content: public Task<ICollection<Membership>> AllMembershipsForAsync(User user)
    parameters:
    - id: user
      type: Warbler.Models.User
      description: The user to fetch memberships for.
    return:
      type: Task{ICollection{Warbler.Models.Membership}}
    content.vb: Public Function AllMembershipsForAsync(user As User) As Task(Of ICollection(Of Membership))
  overload: Warbler.Services.MembershipService.AllMembershipsForAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Warbler.Services
  commentId: N:Warbler.Services
  isExternal: false
  name: Warbler.Services
  nameWithType: Warbler.Services
  fullName: Warbler.Services
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Warbler.Services.MembershipService.#ctor*
  commentId: Overload:Warbler.Services.MembershipService.#ctor
  isExternal: false
  name: MembershipService
  nameWithType: MembershipService.MembershipService
  fullName: Warbler.Services.MembershipService.MembershipService
- uid: Warbler.Interfaces.IMembershipRepository
  commentId: T:Warbler.Interfaces.IMembershipRepository
  parent: Warbler.Interfaces
  isExternal: false
  name: IMembershipRepository
  nameWithType: IMembershipRepository
  fullName: Warbler.Interfaces.IMembershipRepository
- uid: Warbler.Interfaces
  commentId: N:Warbler.Interfaces
  isExternal: false
  name: Warbler.Interfaces
  nameWithType: Warbler.Interfaces
  fullName: Warbler.Interfaces
- uid: Warbler.Services.MembershipService.AllChannelsForAsync*
  commentId: Overload:Warbler.Services.MembershipService.AllChannelsForAsync
  isExternal: false
  name: AllChannelsForAsync
  nameWithType: MembershipService.AllChannelsForAsync
  fullName: Warbler.Services.MembershipService.AllChannelsForAsync
- uid: Warbler.Models.User
  commentId: T:Warbler.Models.User
  parent: Warbler.Models
  isExternal: false
  name: User
  nameWithType: User
  fullName: Warbler.Models.User
- uid: Task{ICollection{Warbler.Models.Channel}}
  commentId: '!:Task{ICollection{Warbler.Models.Channel}}'
  definition: Task`1
  name: Task<ICollection<Channel>>
  nameWithType: Task<ICollection<Channel>>
  fullName: Task<ICollection<Warbler.Models.Channel>>
  nameWithType.vb: Task(Of ICollection(Of Channel))
  fullName.vb: Task(Of ICollection(Of Warbler.Models.Channel))
  name.vb: Task(Of ICollection(Of Channel))
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Warbler.Models.Channel
    name: Channel
    nameWithType: Channel
    fullName: Warbler.Models.Channel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Warbler.Models.Channel
    name: Channel
    nameWithType: Channel
    fullName: Warbler.Models.Channel
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Warbler.Models
  commentId: N:Warbler.Models
  isExternal: false
  name: Warbler.Models
  nameWithType: Warbler.Models
  fullName: Warbler.Models
- uid: Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Warbler.Services.MembershipService.AllMembershipsForAsync*
  commentId: Overload:Warbler.Services.MembershipService.AllMembershipsForAsync
  isExternal: false
  name: AllMembershipsForAsync
  nameWithType: MembershipService.AllMembershipsForAsync
  fullName: Warbler.Services.MembershipService.AllMembershipsForAsync
- uid: Warbler.Models.Channel
  commentId: T:Warbler.Models.Channel
  parent: Warbler.Models
  isExternal: false
  name: Channel
  nameWithType: Channel
  fullName: Warbler.Models.Channel
- uid: Task{ICollection{Warbler.Models.Membership}}
  commentId: '!:Task{ICollection{Warbler.Models.Membership}}'
  definition: Task`1
  name: Task<ICollection<Membership>>
  nameWithType: Task<ICollection<Membership>>
  fullName: Task<ICollection<Warbler.Models.Membership>>
  nameWithType.vb: Task(Of ICollection(Of Membership))
  fullName.vb: Task(Of ICollection(Of Warbler.Models.Membership))
  name.vb: Task(Of ICollection(Of Membership))
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Warbler.Models.Membership
    name: Membership
    nameWithType: Membership
    fullName: Warbler.Models.Membership
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Warbler.Models.Membership
    name: Membership
    nameWithType: Membership
    fullName: Warbler.Models.Membership
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
