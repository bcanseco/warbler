### YamlMime:ManagedReference
items:
- uid: Warbler.Services.MessageService
  commentId: T:Warbler.Services.MessageService
  id: MessageService
  parent: Warbler.Services
  children:
  - Warbler.Services.MessageService.#ctor(Warbler.Interfaces.IMessageRepository)
  - Warbler.Services.MessageService.CreateAsync(System.String,Warbler.Models.User,Warbler.Models.Channel)
  - Warbler.Services.MessageService.LatestIn(Warbler.Models.Channel)
  langs:
  - csharp
  - vb
  name: MessageService
  nameWithType: MessageService
  fullName: Warbler.Services.MessageService
  type: Class
  source:
    id: MessageService
    path: ''
    startLine: 3085
  assemblies:
  - cs.temp.dll
  namespace: Warbler.Services
  summary: "\nThe business logic layer for manipulation of message data.\n"
  example: []
  syntax:
    content: public class MessageService
    content.vb: Public Class MessageService
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Warbler.Services.MessageService.#ctor(Warbler.Interfaces.IMessageRepository)
  commentId: M:Warbler.Services.MessageService.#ctor(Warbler.Interfaces.IMessageRepository)
  id: '#ctor(Warbler.Interfaces.IMessageRepository)'
  parent: Warbler.Services.MessageService
  langs:
  - csharp
  - vb
  name: MessageService(IMessageRepository)
  nameWithType: MessageService.MessageService(IMessageRepository)
  fullName: Warbler.Services.MessageService.MessageService(Warbler.Interfaces.IMessageRepository)
  type: Constructor
  source:
    id: .ctor
    path: ''
    startLine: 3089
  assemblies:
  - cs.temp.dll
  namespace: Warbler.Services
  syntax:
    content: public MessageService(IMessageRepository repository)
    parameters:
    - id: repository
      type: Warbler.Interfaces.IMessageRepository
    content.vb: Public Sub New(repository As IMessageRepository)
  overload: Warbler.Services.MessageService.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Warbler.Services.MessageService.LatestIn(Warbler.Models.Channel)
  commentId: M:Warbler.Services.MessageService.LatestIn(Warbler.Models.Channel)
  id: LatestIn(Warbler.Models.Channel)
  parent: Warbler.Services.MessageService
  langs:
  - csharp
  - vb
  name: LatestIn(Channel)
  nameWithType: MessageService.LatestIn(Channel)
  fullName: Warbler.Services.MessageService.LatestIn(Warbler.Models.Channel)
  type: Method
  source:
    id: LatestIn
    path: ''
    startLine: 3099
  assemblies:
  - cs.temp.dll
  namespace: Warbler.Services
  summary: "\nGets the latest saved messages for a channel.\n"
  example: []
  syntax:
    content: public Task<List<Message>> LatestIn(Channel channel)
    parameters:
    - id: channel
      type: Warbler.Models.Channel
      description: The channel to fetch messages from.
    return:
      type: Task{List{Warbler.Models.Message}}
      description: A collection of saved messages.
    content.vb: Public Function LatestIn(channel As Channel) As Task(Of List(Of Message))
  overload: Warbler.Services.MessageService.LatestIn*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Warbler.Services.MessageService.CreateAsync(System.String,Warbler.Models.User,Warbler.Models.Channel)
  commentId: M:Warbler.Services.MessageService.CreateAsync(System.String,Warbler.Models.User,Warbler.Models.Channel)
  id: CreateAsync(System.String,Warbler.Models.User,Warbler.Models.Channel)
  parent: Warbler.Services.MessageService
  langs:
  - csharp
  - vb
  name: CreateAsync(String, User, Channel)
  nameWithType: MessageService.CreateAsync(String, User, Channel)
  fullName: Warbler.Services.MessageService.CreateAsync(System.String, Warbler.Models.User, Warbler.Models.Channel)
  type: Method
  source:
    id: CreateAsync
    path: ''
    startLine: 3109
  assemblies:
  - cs.temp.dll
  namespace: Warbler.Services
  summary: "\nCreates and returns a message.\n"
  example: []
  syntax:
    content: public Task<Message> CreateAsync(string text, User user, Channel channel)
    parameters:
    - id: text
      type: System.String
      description: The content of the message.
    - id: user
      type: Warbler.Models.User
      description: The sender.
    - id: channel
      type: Warbler.Models.Channel
      description: The containing channel.
    return:
      type: Task{Warbler.Models.Message}
      description: The created message.
    content.vb: Public Function CreateAsync(text As String, user As User, channel As Channel) As Task(Of Message)
  overload: Warbler.Services.MessageService.CreateAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Warbler.Services
  commentId: N:Warbler.Services
  isExternal: false
  name: Warbler.Services
  nameWithType: Warbler.Services
  fullName: Warbler.Services
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Warbler.Services.MessageService.#ctor*
  commentId: Overload:Warbler.Services.MessageService.#ctor
  isExternal: false
  name: MessageService
  nameWithType: MessageService.MessageService
  fullName: Warbler.Services.MessageService.MessageService
- uid: Warbler.Interfaces.IMessageRepository
  commentId: T:Warbler.Interfaces.IMessageRepository
  parent: Warbler.Interfaces
  isExternal: false
  name: IMessageRepository
  nameWithType: IMessageRepository
  fullName: Warbler.Interfaces.IMessageRepository
- uid: Warbler.Interfaces
  commentId: N:Warbler.Interfaces
  isExternal: false
  name: Warbler.Interfaces
  nameWithType: Warbler.Interfaces
  fullName: Warbler.Interfaces
- uid: Warbler.Services.MessageService.LatestIn*
  commentId: Overload:Warbler.Services.MessageService.LatestIn
  isExternal: false
  name: LatestIn
  nameWithType: MessageService.LatestIn
  fullName: Warbler.Services.MessageService.LatestIn
- uid: Warbler.Models.Channel
  commentId: T:Warbler.Models.Channel
  parent: Warbler.Models
  isExternal: false
  name: Channel
  nameWithType: Channel
  fullName: Warbler.Models.Channel
- uid: Task{List{Warbler.Models.Message}}
  commentId: '!:Task{List{Warbler.Models.Message}}'
  definition: Task`1
  name: Task<List<Message>>
  nameWithType: Task<List<Message>>
  fullName: Task<List<Warbler.Models.Message>>
  nameWithType.vb: Task(Of List(Of Message))
  fullName.vb: Task(Of List(Of Warbler.Models.Message))
  name.vb: Task(Of List(Of Message))
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Warbler.Models.Message
    name: Message
    nameWithType: Message
    fullName: Warbler.Models.Message
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Warbler.Models.Message
    name: Message
    nameWithType: Message
    fullName: Warbler.Models.Message
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Warbler.Models
  commentId: N:Warbler.Models
  isExternal: false
  name: Warbler.Models
  nameWithType: Warbler.Models
  fullName: Warbler.Models
- uid: Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Warbler.Services.MessageService.CreateAsync*
  commentId: Overload:Warbler.Services.MessageService.CreateAsync
  isExternal: false
  name: CreateAsync
  nameWithType: MessageService.CreateAsync
  fullName: Warbler.Services.MessageService.CreateAsync
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Warbler.Models.User
  commentId: T:Warbler.Models.User
  parent: Warbler.Models
  isExternal: false
  name: User
  nameWithType: User
  fullName: Warbler.Models.User
- uid: Task{Warbler.Models.Message}
  commentId: '!:Task{Warbler.Models.Message}'
  definition: Task`1
  name: Task<Message>
  nameWithType: Task<Message>
  fullName: Task<Warbler.Models.Message>
  nameWithType.vb: Task(Of Message)
  fullName.vb: Task(Of Warbler.Models.Message)
  name.vb: Task(Of Message)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Warbler.Models.Message
    name: Message
    nameWithType: Message
    fullName: Warbler.Models.Message
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Warbler.Models.Message
    name: Message
    nameWithType: Message
    fullName: Warbler.Models.Message
  - name: )
    nameWithType: )
    fullName: )
