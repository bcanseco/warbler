### YamlMime:ManagedReference
items:
- uid: Warbler.Services.UniversityService
  commentId: T:Warbler.Services.UniversityService
  id: UniversityService
  parent: Warbler.Services
  children:
  - Warbler.Services.UniversityService.#ctor(Warbler.Interfaces.IUniversityRepository)
  - Warbler.Services.UniversityService.ApplyClaimAsync(Warbler.Models.University,System.String)
  - Warbler.Services.UniversityService.DeleteAsync(Warbler.Models.University)
  - Warbler.Services.UniversityService.FindByIdAsync(System.Int32)
  - Warbler.Services.UniversityService.GetAllAsync
  - Warbler.Services.UniversityService.GetOrCreateAsync(NearByResult,System.Collections.Generic.IEnumerable{Warbler.Models.ChannelTemplate})
  - Warbler.Services.UniversityService.JoinAsync(Warbler.Models.User,Warbler.Models.University,System.String)
  langs:
  - csharp
  - vb
  name: UniversityService
  nameWithType: UniversityService
  fullName: Warbler.Services.UniversityService
  type: Class
  source:
    id: UniversityService
    path: ''
    startLine: 4036
  assemblies:
  - cs.temp.dll
  namespace: Warbler.Services
  summary: "\nThe business logic layer for manipulation of university data.\n"
  example: []
  syntax:
    content: public class UniversityService
    content.vb: Public Class UniversityService
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Warbler.Services.UniversityService.#ctor(Warbler.Interfaces.IUniversityRepository)
  commentId: M:Warbler.Services.UniversityService.#ctor(Warbler.Interfaces.IUniversityRepository)
  id: '#ctor(Warbler.Interfaces.IUniversityRepository)'
  parent: Warbler.Services.UniversityService
  langs:
  - csharp
  - vb
  name: UniversityService(IUniversityRepository)
  nameWithType: UniversityService.UniversityService(IUniversityRepository)
  fullName: Warbler.Services.UniversityService.UniversityService(Warbler.Interfaces.IUniversityRepository)
  type: Constructor
  source:
    id: .ctor
    path: ''
    startLine: 4040
  assemblies:
  - cs.temp.dll
  namespace: Warbler.Services
  syntax:
    content: public UniversityService(IUniversityRepository repository)
    parameters:
    - id: repository
      type: Warbler.Interfaces.IUniversityRepository
    content.vb: Public Sub New(repository As IUniversityRepository)
  overload: Warbler.Services.UniversityService.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Warbler.Services.UniversityService.GetOrCreateAsync(NearByResult,System.Collections.Generic.IEnumerable{Warbler.Models.ChannelTemplate})
  commentId: M:Warbler.Services.UniversityService.GetOrCreateAsync(NearByResult,System.Collections.Generic.IEnumerable{Warbler.Models.ChannelTemplate})
  id: GetOrCreateAsync(NearByResult,System.Collections.Generic.IEnumerable{Warbler.Models.ChannelTemplate})
  parent: Warbler.Services.UniversityService
  langs:
  - csharp
  - vb
  name: GetOrCreateAsync(NearByResult, IEnumerable<ChannelTemplate>)
  nameWithType: UniversityService.GetOrCreateAsync(NearByResult, IEnumerable<ChannelTemplate>)
  fullName: Warbler.Services.UniversityService.GetOrCreateAsync(NearByResult, System.Collections.Generic.IEnumerable<Warbler.Models.ChannelTemplate>)
  type: Method
  source:
    id: GetOrCreateAsync
    path: ''
    startLine: 4054
  assemblies:
  - cs.temp.dll
  namespace: Warbler.Services
  summary: "\nGets the university associated with the given\nGoogle Places result or creates it if nonexistent.\n"
  example: []
  syntax:
    content: public Task<University> GetOrCreateAsync(NearByResult uni, IEnumerable<ChannelTemplate> templates)
    parameters:
    - id: uni
      type: NearByResult
      description: The Google Places search result to use.
    - id: templates
      type: System.Collections.Generic.IEnumerable{Warbler.Models.ChannelTemplate}
      description: "\nThe channel templates to use if the university needs to be created.\n"
    return:
      type: Task{Warbler.Models.University}
      description: The related University object.
    content.vb: Public Function GetOrCreateAsync(uni As NearByResult, templates As IEnumerable(Of ChannelTemplate)) As Task(Of University)
  overload: Warbler.Services.UniversityService.GetOrCreateAsync*
  nameWithType.vb: UniversityService.GetOrCreateAsync(NearByResult, IEnumerable(Of ChannelTemplate))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Warbler.Services.UniversityService.GetOrCreateAsync(NearByResult, System.Collections.Generic.IEnumerable(Of Warbler.Models.ChannelTemplate))
  name.vb: GetOrCreateAsync(NearByResult, IEnumerable(Of ChannelTemplate))
- uid: Warbler.Services.UniversityService.JoinAsync(Warbler.Models.User,Warbler.Models.University,System.String)
  commentId: M:Warbler.Services.UniversityService.JoinAsync(Warbler.Models.User,Warbler.Models.University,System.String)
  id: JoinAsync(Warbler.Models.User,Warbler.Models.University,System.String)
  parent: Warbler.Services.UniversityService
  langs:
  - csharp
  - vb
  name: JoinAsync(User, University, String)
  nameWithType: UniversityService.JoinAsync(User, University, String)
  fullName: Warbler.Services.UniversityService.JoinAsync(Warbler.Models.User, Warbler.Models.University, System.String)
  type: Method
  source:
    id: JoinAsync
    path: ''
    startLine: 4075
  assemblies:
  - cs.temp.dll
  namespace: Warbler.Services
  summary: "\nAdds a user as a member to every channel in a university's server.\n"
  remarks: "\nThis will create new rows in the Membership table (User x Channel).\n"
  example: []
  syntax:
    content: public Task JoinAsync(User user, University university, string samlName = null)
    parameters:
    - id: user
      type: Warbler.Models.User
      description: The user to add.
    - id: university
      type: Warbler.Models.University
      description: The university whose channels will be added to.
    - id: samlName
      type: System.String
      description: Used for claimed universities.
    return:
      type: Task
    content.vb: Public Function JoinAsync(user As User, university As University, samlName As String = Nothing) As Task
  overload: Warbler.Services.UniversityService.JoinAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Warbler.Services.UniversityService.GetAllAsync
  commentId: M:Warbler.Services.UniversityService.GetAllAsync
  id: GetAllAsync
  parent: Warbler.Services.UniversityService
  langs:
  - csharp
  - vb
  name: GetAllAsync()
  nameWithType: UniversityService.GetAllAsync()
  fullName: Warbler.Services.UniversityService.GetAllAsync()
  type: Method
  source:
    id: GetAllAsync
    path: ''
    startLine: 4091
  assemblies:
  - cs.temp.dll
  namespace: Warbler.Services
  summary: "\nGets a list of all universities and their properties\ndown to the message level. Results are untracked.\n"
  example: []
  syntax:
    content: public Task<List<University>> GetAllAsync()
    return:
      type: Task{System.Collections.Generic.List{Warbler.Models.University}}
    content.vb: Public Function GetAllAsync As Task(Of List(Of University))
  overload: Warbler.Services.UniversityService.GetAllAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Warbler.Services.UniversityService.ApplyClaimAsync(Warbler.Models.University,System.String)
  commentId: M:Warbler.Services.UniversityService.ApplyClaimAsync(Warbler.Models.University,System.String)
  id: ApplyClaimAsync(Warbler.Models.University,System.String)
  parent: Warbler.Services.UniversityService
  langs:
  - csharp
  - vb
  name: ApplyClaimAsync(University, String)
  nameWithType: UniversityService.ApplyClaimAsync(University, String)
  fullName: Warbler.Services.UniversityService.ApplyClaimAsync(Warbler.Models.University, System.String)
  type: Method
  source:
    id: ApplyClaimAsync
    path: ''
    startLine: 4096
  assemblies:
  - cs.temp.dll
  namespace: Warbler.Services
  syntax:
    content: public Task ApplyClaimAsync(University university, string submitterId)
    parameters:
    - id: university
      type: Warbler.Models.University
    - id: submitterId
      type: System.String
    return:
      type: Task
    content.vb: Public Function ApplyClaimAsync(university As University, submitterId As String) As Task
  overload: Warbler.Services.UniversityService.ApplyClaimAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Warbler.Services.UniversityService.FindByIdAsync(System.Int32)
  commentId: M:Warbler.Services.UniversityService.FindByIdAsync(System.Int32)
  id: FindByIdAsync(System.Int32)
  parent: Warbler.Services.UniversityService
  langs:
  - csharp
  - vb
  name: FindByIdAsync(Int32)
  nameWithType: UniversityService.FindByIdAsync(Int32)
  fullName: Warbler.Services.UniversityService.FindByIdAsync(System.Int32)
  type: Method
  source:
    id: FindByIdAsync
    path: ''
    startLine: 4099
  assemblies:
  - cs.temp.dll
  namespace: Warbler.Services
  syntax:
    content: public Task<University> FindByIdAsync(int id)
    parameters:
    - id: id
      type: System.Int32
    return:
      type: Task{Warbler.Models.University}
    content.vb: Public Function FindByIdAsync(id As Integer) As Task(Of University)
  overload: Warbler.Services.UniversityService.FindByIdAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Warbler.Services.UniversityService.DeleteAsync(Warbler.Models.University)
  commentId: M:Warbler.Services.UniversityService.DeleteAsync(Warbler.Models.University)
  id: DeleteAsync(Warbler.Models.University)
  parent: Warbler.Services.UniversityService
  langs:
  - csharp
  - vb
  name: DeleteAsync(University)
  nameWithType: UniversityService.DeleteAsync(University)
  fullName: Warbler.Services.UniversityService.DeleteAsync(Warbler.Models.University)
  type: Method
  source:
    id: DeleteAsync
    path: ''
    startLine: 4103
  assemblies:
  - cs.temp.dll
  namespace: Warbler.Services
  syntax:
    content: public Task DeleteAsync(University university)
    parameters:
    - id: university
      type: Warbler.Models.University
    return:
      type: Task
    content.vb: Public Function DeleteAsync(university As University) As Task
  overload: Warbler.Services.UniversityService.DeleteAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Warbler.Services
  commentId: N:Warbler.Services
  isExternal: false
  name: Warbler.Services
  nameWithType: Warbler.Services
  fullName: Warbler.Services
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Warbler.Services.UniversityService.#ctor*
  commentId: Overload:Warbler.Services.UniversityService.#ctor
  isExternal: false
  name: UniversityService
  nameWithType: UniversityService.UniversityService
  fullName: Warbler.Services.UniversityService.UniversityService
- uid: Warbler.Interfaces.IUniversityRepository
  commentId: T:Warbler.Interfaces.IUniversityRepository
  parent: Warbler.Interfaces
  isExternal: false
  name: IUniversityRepository
  nameWithType: IUniversityRepository
  fullName: Warbler.Interfaces.IUniversityRepository
- uid: Warbler.Interfaces
  commentId: N:Warbler.Interfaces
  isExternal: false
  name: Warbler.Interfaces
  nameWithType: Warbler.Interfaces
  fullName: Warbler.Interfaces
- uid: Warbler.Services.UniversityService.GetOrCreateAsync*
  commentId: Overload:Warbler.Services.UniversityService.GetOrCreateAsync
  isExternal: false
  name: GetOrCreateAsync
  nameWithType: UniversityService.GetOrCreateAsync
  fullName: Warbler.Services.UniversityService.GetOrCreateAsync
- uid: NearByResult
  isExternal: true
  name: NearByResult
  nameWithType: NearByResult
  fullName: NearByResult
- uid: System.Collections.Generic.IEnumerable{Warbler.Models.ChannelTemplate}
  commentId: T:System.Collections.Generic.IEnumerable{Warbler.Models.ChannelTemplate}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<ChannelTemplate>
  nameWithType: IEnumerable<ChannelTemplate>
  fullName: System.Collections.Generic.IEnumerable<Warbler.Models.ChannelTemplate>
  nameWithType.vb: IEnumerable(Of ChannelTemplate)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Warbler.Models.ChannelTemplate)
  name.vb: IEnumerable(Of ChannelTemplate)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Warbler.Models.ChannelTemplate
    name: ChannelTemplate
    nameWithType: ChannelTemplate
    fullName: Warbler.Models.ChannelTemplate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Warbler.Models.ChannelTemplate
    name: ChannelTemplate
    nameWithType: ChannelTemplate
    fullName: Warbler.Models.ChannelTemplate
  - name: )
    nameWithType: )
    fullName: )
- uid: Task{Warbler.Models.University}
  commentId: '!:Task{Warbler.Models.University}'
  definition: Task`1
  name: Task<University>
  nameWithType: Task<University>
  fullName: Task<Warbler.Models.University>
  nameWithType.vb: Task(Of University)
  fullName.vb: Task(Of Warbler.Models.University)
  name.vb: Task(Of University)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Warbler.Models.University
    name: University
    nameWithType: University
    fullName: Warbler.Models.University
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Warbler.Models.University
    name: University
    nameWithType: University
    fullName: Warbler.Models.University
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Warbler.Services.UniversityService.JoinAsync*
  commentId: Overload:Warbler.Services.UniversityService.JoinAsync
  isExternal: false
  name: JoinAsync
  nameWithType: UniversityService.JoinAsync
  fullName: Warbler.Services.UniversityService.JoinAsync
- uid: Warbler.Models.User
  commentId: T:Warbler.Models.User
  parent: Warbler.Models
  isExternal: false
  name: User
  nameWithType: User
  fullName: Warbler.Models.User
- uid: Warbler.Models.University
  commentId: T:Warbler.Models.University
  parent: Warbler.Models
  isExternal: false
  name: University
  nameWithType: University
  fullName: Warbler.Models.University
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Task
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: Task
- uid: Warbler.Models
  commentId: N:Warbler.Models
  isExternal: false
  name: Warbler.Models
  nameWithType: Warbler.Models
  fullName: Warbler.Models
- uid: Warbler.Services.UniversityService.GetAllAsync*
  commentId: Overload:Warbler.Services.UniversityService.GetAllAsync
  isExternal: false
  name: GetAllAsync
  nameWithType: UniversityService.GetAllAsync
  fullName: Warbler.Services.UniversityService.GetAllAsync
- uid: Task{System.Collections.Generic.List{Warbler.Models.University}}
  commentId: '!:Task{System.Collections.Generic.List{Warbler.Models.University}}'
  definition: Task`1
  name: Task<List<University>>
  nameWithType: Task<List<University>>
  fullName: Task<System.Collections.Generic.List<Warbler.Models.University>>
  nameWithType.vb: Task(Of List(Of University))
  fullName.vb: Task(Of System.Collections.Generic.List(Of Warbler.Models.University))
  name.vb: Task(Of List(Of University))
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Warbler.Models.University
    name: University
    nameWithType: University
    fullName: Warbler.Models.University
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Warbler.Models.University
    name: University
    nameWithType: University
    fullName: Warbler.Models.University
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Warbler.Services.UniversityService.ApplyClaimAsync*
  commentId: Overload:Warbler.Services.UniversityService.ApplyClaimAsync
  isExternal: false
  name: ApplyClaimAsync
  nameWithType: UniversityService.ApplyClaimAsync
  fullName: Warbler.Services.UniversityService.ApplyClaimAsync
- uid: Warbler.Services.UniversityService.FindByIdAsync*
  commentId: Overload:Warbler.Services.UniversityService.FindByIdAsync
  isExternal: false
  name: FindByIdAsync
  nameWithType: UniversityService.FindByIdAsync
  fullName: Warbler.Services.UniversityService.FindByIdAsync
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Warbler.Services.UniversityService.DeleteAsync*
  commentId: Overload:Warbler.Services.UniversityService.DeleteAsync
  isExternal: false
  name: DeleteAsync
  nameWithType: UniversityService.DeleteAsync
  fullName: Warbler.Services.UniversityService.DeleteAsync
